
    1.zookeeper概述
        -为分布式应用提供协调服务的项目
        -负责存储和管理所有结点(单个服务)的状态变化
        -特点:
            -单个leader和多个follower
            -集群半数以上存活，zookeeper集群方能正常使用
            -全局数据一致，所有的zk结点的数据一样
            -原子性，数据更新要么成功,要么失败
            -实时性，同步数据的时间很短
        -数据结构：
            -数据模型时tree性结构
            -每个node结点只能保存1mb的数据
            -每个node都有其唯一标识
        -应用场景：
            -提供的服务：
                -统一命名服务
                -统一配置管理
                -统一集群管理
                -服务器节点动态上下线
                -软负载均衡

    2.zookeeper安装和参数配置
        -安装
            自行百度
        -参数配置
            -tickTime       心跳帧 ms
            -initLimit      初始化心跳延迟上限次数
            -syncLimit      启动成功后心跳延迟上限次数
            -dataDir        数据文件目录+数据持久化路径
            -clientPort     客户端连接的端口号

    3.zookeeper内部原理
        -zookeeper一般选用安装奇数台服务
        -选举机制
            -例：
                服务器1启动，给自己投票，然后发投票信息，由于其它机器还没有启动所以它收不到反馈信息，服务器1的状态一直属于Looking(选举状态)。
                服务器2启动，给自己投票，同时与之前启动的服务器1交换结果，由于服务器2的编号大所以服务器2胜出，但此时投票数没有大于半数，所以两个服务器的状态依然是LOOKING。
                服务器3启动，给自己投票，同时与之前启动的服务器1,2交换信息，由于服务器3的编号最大所以服务器3胜出，此时投票数正好大于半数，所以服务器3成为领导者，服务器1,2成为小弟。
                服务器4启动，给自己投票，同时与之前启动的服务器1,2,3交换信息，尽管服务器4的编号大，但之前服务器3已经胜出，所以服务器4只能成为小弟。
                服务器5启动，后面的逻辑同服务器4成为小弟
        -节点类型：
            -持久persistent
                -客户端与服务器断开连接后,节点不删除
            -短暂ephemeral
                -客户端与服务器断开连接后,节点删除
        -stat结构体
            -czxid              创建节点的事务zxid
            -ctime-znode        被创建的时间戳
            -mzxid-znode        最后更新的事务zxid
            -mtime-znode        最后修改的时间戳
            -pzxid-znode        最后更新的zxid
            -cversion-znode     子节点变化号
            -dataversion-znode  数据变化号
            -aclVersion-znode   访问控制列表的变化号
            -ephemeralOwner     临时节点的session id
        -监听器原理
            -主要步骤：
                -首先有个main主线程
                -main线程创建zk-cli,这时就会创建两个线程,一个负责connect,一个listener
                -connect将注册的监听事件发送给zookeeper
                -在zookeeper监听器列表将注册的监听事件添加到列表中
                -zookeeper监听到有数据或路径变化,就会发送给listener
                -listener接受到就进行process处理
            -常见的监听：
                -监听节点数据的变化
                -监听子节点增减的变化























