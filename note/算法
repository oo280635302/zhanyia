
-------------------------------------------------算法-------------------------------------------------

-------将已有数据进行排序的算法------------
	1.排序Sort
		-冒泡排序：
			-概念：两个数相互对比,调换位置

		-选择排序：
			-概念：选择最小的数与第一个数交换,然后选除了第一个的最小数与第二个数交换...
			-实例：(从大到小选择排序)
				func sort(arr *[5]int) {
					for j:= 0;j< len(arr);j++{
						max,maxIndex := arr[j],j
						for i:= j+1;i< len(arr);i++{
							if max < arr[i]{
								max = arr[i]
								maxIndex = i
							}
						}
						arr[j],arr[maxIndex] = arr[maxIndex],arr[j]
					}
				}
		-插入排序：（效率优于选择排序）
			-概念：将数组分成有序的和无序的两部分,才开始有序的只有第一个,将无序的提一个数据出来,
				   与前面有序依次的进行比较,每次比较没符合规则有序数据就往后移且覆盖后一个数据,直
				   到找到符合规则的就插入到其后面那个数据中(该数据已经copy过一次了)。
			-实例：
				func insertSort(arr *[5]int) {
					for i:=1; i < 5;i++{
						insertVal := arr[i] //无序列表中提取出来的第一个数
						insertIndex := i -1	//有序列表最后一个数据索引
						for insertIndex >= 0 && arr[insertIndex] < insertVal{
							//有序列表后移
							arr[insertIndex+1] = arr[insertIndex]
							insertIndex--
						}
						if insertIndex+1 != i{
							//插入无序的数进入有序
							arr[insertIndex+1] = insertVal
						}
					}

				}
		-快速排序：
			-冒泡排序的改进
			-概念：
				找一个基准数,交换他们的位置,使基准左边都小于等于基准右边,分隔开,递归分隔的
				左右数组,直到排序成功。
			-实例：
				func QuickSort(left int,right int,arr *[10]int)  {
					l :=left
					r :=right
					pivot := arr[(left+right)/2]

					for ;l<r; {
						for ;arr[l] < pivot;{
							l++
						}
						for ;arr[r] > pivot;{
							r--
						}
						if l>=r{
							break
						}
						arr[l],arr[r] = arr[r],arr[l]
						if arr[l] == pivot{
							r--
						}
						if arr[r] == pivot{
							l++
						}
					}
					fmt.Println(l,r)
					if l==r {
						l++
						r--
					}
					fmt.Println(l,r)
					if left<r{
						QuickSort(left,r,arr)
					}
					if right > l{
						QuickSort(l,right,arr)
					}
				}
		-1W数比较,选择排序：9s,插入排序：2s,快速排序：0.12s（打印的情况）

    2.堆排序
        -1.先无序数组转存储成堆
        -2.固定一个最大值,将剩余的数再构造成一个大根堆
        -实例:
        // 堆排序
        func heapSort(arr []int)[]int{
        	arrLen := len(arr)
        	buildMaxHeap(arr,arrLen)
        	for i:=arrLen -1;i>=0;i--{
        		swap(arr,0,i)
        		arrLen -= 1
        		heapify(arr,0,arrLen)
        	}
        	return arr
        }

        // 构建顶大堆
        func buildMaxHeap(arr []int,arrLen int) {
        	for i:= arrLen/2;i>=0;i--{
        		heapify(arr,i,arrLen)
        	}
        }

        // 堆化
        func heapify(arr []int,i,arrLen int) {
        	left := 2*i+1
        	right := 2*i+2
        	largest := i
        	if left < arrLen && arr[left] > arr[largest]{   // >升序 <降序
        		largest = left
        	}
        	if right < arrLen && arr[right] > arr[largest]{
        		largest = right
        	}
        	if right != i{
        		swap(arr,i,largest)
        		heapify(arr,largest,arrLen)
        	}
        }

        // 交换位置
        func swap(arr []int,i,j int) {
        	arr[i],arr[j] = arr[j],arr[i]
        }

    3.归并排序：
        特点：速度仅次于快速排序nlogn,稳定
        算法：分治
        func mergeSort(r []int) []int {
            length := len(r)
            if length <= 1 {
                return r
            }
            num := length / 2
            left := mergeSort(r[:num])
            right := mergeSort(r[num:])
            return merge(left, right)
        }
        func merge(left, right []int) (result []int) {
            l, r := 0, 0
            for l < len(left) && r < len(right) {
                if left[l] < right[r] {
                    result = append(result, left[l])
                    l++
                } else {
                    result = append(result, right[r])
                    r++
                }
            }
            result = append(result, left[l:]...)
            result = append(result, right[r:]...)
        }
---------------------字符匹配算法-------------------------
    1.kmp算法
        -特点：移动模式串, 不进行回溯
        -规则:
            1.正常匹配 第一次 当遇到不匹配时暂停
            2.找不匹配的字符前方是否有 相同的前缀与后缀
                -例 AB A AB  等于AB是相同的 （ABAAB其本身不能为前后缀匹配）
            3.将模式串前缀移动到后缀的位置
            4.继续匹配
        -实例：
            func StrStr(haystack string, needle string) int {
                lenRoot := len(haystack)
                lenTmpl := len(needle)
                if lenTmpl == 0 {
                    return 0
                }

                next := KMPNext(needle)
                for i, j := 0, 0; i < lenRoot; { //i=haystack j=needle
                    // 找到 第一次不匹配的位置
                    for j < lenTmpl && i < lenRoot && haystack[i] == needle[j] {
                        i++
                        j++
                    }
                    // 当这是j已经被匹配完了 就返回
                    if j == lenTmpl {
                        return i - j
                    }
                    // 当i被匹配完了,就说明没有
                    if i == lenRoot {
                        return -1
                    }

                    // i 每次都会往后移动
                    // j 根据返回值 重新定位要开始匹配的位置
                    if j > 0 {
                        j = next[j-1]
                    } else {
                        i++
                    }
                }
                return -1
            }
            func KMPNext(s string) []int {
                lenth := len(s)
                next := make([]int, lenth)
                next[0] = 0
                i, j := 1, 0
                for i < lenth {
                    if s[i] == s[j] {
                        next[i] = j + 1 // 一下个匹配位置为下一位
                        i++
                        j++
                    } else {
                        if j == 0 {
                            next[i] = 0 // 重头开始匹配
                            i++
                        } else {
                            j = next[j-1] // 回退
                        }
                    }
                }
                fmt.Println(next)
                return next
            }


--------------Dynamic Programming动态规划算法------------------------
    1.概念:
        -常见时间复杂度 n2, 常见空间复杂度 n2(空间容易优化)
        动态规划：将一个大问题分解成有相同属性的小问题进行解决
        使用动态规划的场景：
            1.重叠子问题  不同的问题,可能都要求1个相同问题的解
            2.最优子结构  子解必定也是子问题的最优解
            3.无后效性 求出来的子问题并不会因为后面求出来的改变
    2.解决问题的方法
        1.划分状态,即划分子问题
        2.状态表示,即如何让计算机理解子问题
        3.状态转移,即父问题是如何由子问题推导出来的
        4.确定边界,确定初始状态是什么？最小的子问题？最终状态又是什么
    3.例子：
       -1.简单例子:
            // 最大子序和  [-2,1,-3,4,-1,2,1,-5,4]
            // 解法:动态规划 8 ms/3.8 MB -- 使用
            func MaxSubArray(nums []int) int {
            	max := nums[0]

            	for i := 1; i < len(nums); i++ {
            		if nums[i] + nums[i-1] > nums[i] {
            			nums[i] += nums[i-1]
            		}
            		if nums[i] > max {
            			max = nums[i]
            		}
            	}
            	fmt.Println(nums)
            	return max
            }
       -2.简单例子:
            // 最小路径和-----------------------------------------------------------------------------------------------------------
            // 思路: 动态规划 每个路径的和都是右边或者下边中选择路径和最小的 从右下角开始找 每个格子都找最小路径和 一直往左上角找  8ms/3.9mb
            // 优化:该题甚至都不用建立 二维动态图 利用grid就可以 节约了0.6mb的内存
            func MinPathSum(grid [][]int) int {
            m, n := len(grid), len(grid[0])

            for i := m - 1; i >= 0; i-- {
                for j := n - 1; j >= 0; j-- {
                    if i == m-1 && j == n-1 {
                        continue
                    } else if i == m-1 && j != n-1 {
                        grid[i][j] = grid[i][j] + grid[i][j+1]
                    } else if i != m-1 && j == n-1 {
                        grid[i][j] = grid[i][j] + grid[i+1][j]
                    } else {
                        grid[i][j] = grid[i][j] + min(grid[i+1][j], grid[i][j+1])
                    }
                }
            }

            return grid[0][0]
            }



------------------栈的算法----------------------
    1.概念
        -后进先出的管道性
        -常见时间复杂度 n, 常见空间复杂度 n
    2.解决问题的思路：
        -额外消费一个stack的空间进行存储需要进行后续判断的数值
        -通过将 stack栈顶元素 与 新数据 进行判断来考虑数据的去留
        -主要考虑的需要判断的地方比较多
    3.例子：
        1.直接的使用 - 栈本身就存储
            // 简化路径-------------------------------------------------------------------------------
            // 使用栈的思想 遇到/.. 就弹栈  遇到/字母就进栈  其余不管 然后展开栈 4ms/4.2mb
            // 利用split 将目录 .. .提取出来
            func SimplifyPath(path string) string {
            	buf := strings.Split(path, "/")
            	var stack []string

            	for i := 0; i < len(buf); i++ {
            		if buf[i] == "" || buf[i] == "." {
            			continue
            		}
            		if buf[i] == ".." {
            			if len(stack) > 0 {
            				stack = stack[0 : len(stack)-1]
            			}
            		} else {
            			stack = append(stack, buf[i])
            		}
            	}

            	return "/" + strings.Join(stack, "/")
            }


------------------回溯的算法----------------------
    1.概念
        -

------------------LRU的算法----------------------
    1.概念:
        Least Recently Used
        淘汰时间最长且最近没被访问的数据
        可用list实现
    2.golang实现
        type LRUNode struct {
            key string
            val interface{}
            prev *LRUNode
            next *LRUNode
        }

        type LRU struct {
            dataMap map[string]*LRUNode
            head *LRUNode
            tail *LRUNode
            capacity int
            count int
        }

        func NewLRU(capacity int)LRU{
            head := &LRUNode{}
            tail := &LRUNode{}
            head.next = tail
            tail.prev = head
            return LRU{head:head,tail:tail,capacity:capacity,count:0,dataMap:make(map[string]*LRUNode)}
        }

        func (L *LRU)Get(key string)interface{} {
            v,ok:=L.dataMap[key]
            if !ok {
                return nil
            }
            //detach node
            L.detachNode(v)
            //insert first
            L.insertFront(v)
            return v.val
        }
        func (L *LRU)detachNode(node *LRUNode) {
            node.prev.next = node.next
            node.next.prev = node.prev
        }
        func (L *LRU)insertFront(node *LRUNode) {
            node.next = L.head.next
            L.head.next = node
            node.prev = L.head
        }
        func (L *LRU)delLast(){
            tmp:=L.tail.prev
            tmp.prev.next = L.tail
            L.tail.prev = tmp.prev
            tmp.next = nil
            tmp.prev = nil
            L.count = L.count-1
            delete(L.dataMap,tmp.key)
        }
        func (L *LRU)Set(key string,val interface{}){
            v,ok :=L.dataMap[key]
            if !ok {
                node :=&LRUNode{key:key,val:val}
                if L.count==L.capacity{
                    L.delLast()
                }
                L.dataMap[key] = node
                L.insertFront(node)
                L.count = L.count+1
            }else {
                L.detachNode(v)
                L.insertFront(v)
            }
        }

------------------two-list的算法----------------------
    1.概念:
        LRU的变种
        Two-List策略维护了两个list,active list 和 inactive list。
        在active list上的数据被认为是hot的,不能释放。
        只有inactive list上的数据可以被释放的。
        首次缓存的数据会被加入到inactive list中,已经在inactive list中的数据如果再次被访问,就会移入active list中。
        两个链表都使用了伪LRU算法维护,新的数据从尾部加入,移除时从头部移除,就像队列一样。
        如果active list中数据的数量远大于inactive list,那么active list头部的页面会被移入inactive list中,从而位置两个表的平衡。








