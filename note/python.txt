
  1.第一个程序
	-print 把内容输出到屏幕上
	-Syntax 语法
	-invalid 无效
	**每一行代码负责一个动作
	-indentation 缩进	
	**每行代码前面不要增加空格
	
 2.python解释器
	-python     2版本python
	-python3    3版本python
	-CPython    官方版本的C语言实现
	-Jython     可以运行在Java平台
	-IronPython 可以运行在.NET和Mono平台
	-PyPy		Python实现的,支持JIT即使编译

  3.python交互式
	-终端直接输出python3进入
	-exit()  退出
	-IPython 交互式shell
		-python2.X 解释器 ipython(环境变量)
		-python3.X 解释器 ipython3
		-exit 直接退出
		-支持补全、自动缩进、支持bash shell、内置很多有用的功能函数
	
  4.Python的IDE --PyCharm
	-就一个编辑器
	-PyCharm：
		-注释后面跟 TODO  蓝色注释(可以提示自己要做的内容)
			# TODO(作者) 内容
	
  5.注释
	- # 就是注释类似于java的//  和html的<-- -->
	-多行注释：""" 被注释内容"""
	-代码规范：PEP8
	
  6.算数运算符
		+  加
		-  减
		*  乘
		/  除
		// 取整除    # 9//2 =4 
		%  取余除    # 9%2=1
		** 幂(次方)  # 2**3=8 
	- *乘法还可以让一个字符串多次重复 # "你好"*3 = "你好你好你好"
	- 优先级与数学一样()里面先进行

  7.变量
	- 变量名 = 值
	# a = 123
	# print(a)
	# 123
	
	- 变量的取名
		-标识符  程序员自己定义的变量名,函数名
			-见名知义
			-由 下划线,字母,数字 组成
			-不能数字开头
			-不能与关键字重名
			-命名规范：
				-严格区分大小写
				-单词之间_连接
					# get_number
				 或者 驼峰
				    # getNumber
				 
		-关键字 
			-可以用 keyword.kwlist（需要先导入keyword工具包（import keyword））
			
			
			
  8.数据类型（4种）
	-str    字符串类型
	-bool   布尔
	-int    整数
	-float  浮点数
	**python中不需要指定数据类型，他自行判断
	-type(变量) 查看一个变量的数据类型
	
	1) 数字型计算时
		bool的True = 1；
		bool的Flase = 0；
	2) 字符串变量用+号可拼接
		# a = "你好"
		# b = "，世界"
		# a += b
		# print(a) //你好，世界
	3) 字符串*整数
		# "你好"*2
		# "你好你好"

  9.变量的输入与输出
		1) input()函数 ,获得用户键盘输入的内容
			# a = input("输入:")  //123
			# print(a)     //结果 输入:123
		2)类型转换函数
			-int(X)    将X转换成一个整数
			-float(X)  将X转换成一个浮点数
		3)格式化输出
			-print("字符串" % 变量)
			-print("字符串" % (变量1,变量2...))
			-%s    字符串
			-%d    十进制整数
				-%06d  显示6位数 不足的用0补全
			-%f    浮点数
				-%.02f 只显示小数点后两位
			-%%    %
				# a = float(input("单价："))
				# b = float(input("数量："))
				# c =a*b
				# print("单价:%.02f，数量:%.02f，总价为：%.02f" % (a,b,c))
		4).format字符串格式化
			-print("{0}{2}{1}".format("王","李","张"))
				# 王张李
			-字符串.format(参数1,参数2...)
				来拼接字符串
			
			
  10.判断语句
		-if
			格式：if 判断语句:
				      成功时执行的内容（前面4个空格）
				  elif 判断语句:
				      成功时执行的内容（前面4个空格）
				  else：
				      失败时执行的内容（前面4个空格）
					  
				# shuRu = input("输入:");
				# shuRu =int(shuRu);
				# if shuRu>100:
				#     print(shuRu);
				# elif shuRu<=100 && shuRu>0:
				#     print("合适");
				# else:
				#     print("太小");
			-if语句中执行的内容前面一定要加4个空格
		
  11.运算符
		1.比较运算符同script一样
			==     等于
			!=     不等于
			<>     不等于
			>      大于
			<      小于
			>=     大于等于
			<=     小于等于
		2.赋值运算符
			=     赋值运算符
			+=    a = a + b 
			-=    a = a - b 
			*=    a = a * b 
			/=    a = a / b 
			%=    a = a % b 
			**=   a = a ** b 
			//=   a = a // b 
		3.位运算符(数字二进制进行计算)
			&     两个值的 相对应位 都为1 则结果为1,不然为0
			|     两个值的 相对应位 有一个为1 则结果为1
			^     当两个值得 相对应位 不同时 结果为1
			~     每个位都取反 0,1互换 (取反-1) 
				- 科普: 
						原码: 0001   二进制:1
						反码: 1110   二进制:-2
						补码: 1111   二进制:-1
				- 判断一个二进制的正负,看他的首位：0为正,1位负
			<<   向左移动运算符 高位丢弃,低位补零  
				# <<101 得10100
			>>   向左移动运算符 高位丢弃,低位补零  
				# >>101 得  1
		4. 逻辑运算符 
			and     和
			or      或
			not     非
		5.成员运算符(判断值在不在范围内)
		    in       在	
			not in   不在
		6.
		
  12.循环语句
	-while循环
	  -格式：while 条件(判断 计数器 是否达到 目标次数):
				 条件满足,执行的内容(4个空格)
				 ...
				 处理条件(计算器+1)
		例1 # i = 0 #普通的循环
			# while i <= 5:
			#     print(i)  //0 1 2 3 4 5
			#     i += 1 

	  -程序一般以0开始计数
	  
		例2 # i = 0 #100以内偶数相加
			# f = 0
			# while i <= 100:
			#     if i % 2 == 0:
			#         f += i
			#     i += 1
			# print(f)
	-break 和 continue 
		-break 满足条件 退出循环
		例1 # i = 0   当i==3时暂停程序
			# while i <= 5:
			#     print(i)  // 0 1 2 3
			#     if i == 3:
			#         break
			#     i += 1
		-continue 满足条件 不再执行重复的代码
		例1 # i = 0   不执行i==3的代码
			# while i <= 5:
			#     if i == 3:
			#         i += 1
			#         continue
			#     print(i)
			#     i += 1	
	-print(主内容,end="")不换行
		#print("你好",end="");
		例1 # i = 1 （5以下的阶乘）
			# while i <= 5:  
			#     f = 1
			#     x = 1
			#     print("%d!" % i,end="  :  ")
			#     while f <= i:   #当前这个数的阶乘的个数
			#         x *= f
			#         if f != i:
			#             print(f,end="*")
			#         else:
			#             print(f,end=" 得 ")
			#         f += 1
			#     print(x)   #阶乘的值
			#     i += 1
		-------------------------------
		例2 # i = 1 （99乘法表）
			# while i <= 9:
			#     print("第%d行" % i)
			#     f = 1
			#     while f<=i:
			#         if f==i :
			#             print("%d*%d=%d" % (f, i,f*i))
			#         else:
			#             print("%d*%d=%d" % (f, i,f*i), end=" ")
			#         f += 1
			#     i += 1	
	-for循环
		-Python中的for是循环遍历,迭代
   格式:for 循环内部的变量 in 列表名:
			print(循环内部的变量)	
		-能遍历所有非数字类型的变量
		*如果遍历的对象是个空,将不会进行遍历
		
  13.工具包,模块
	-模块名也是标识符,命名规则参考标识符命名规则 
	
	-pyc :编译过后的python文件
	  -python会自动将模块变异成字节码,提升程序速度
			正常编译过程:
			-第一步：将 Py 翻译成 字节码
			-第二步：将 字节码 翻译成 机器码
	  -不修改模块源代码时,会直接加载pyc文件
	  
		1) keyword 模块   关键字
			-import keyword 导入
			-keyword.kwlist  查看关键字
			...
		2) random 模块   随机数
			-import random 导入 
			-random.randint(a,b)  随机返回a,b之间的整数(b大于等于a)
			...
		3) os 模块   文件/目录的管理操作
			-import os 导入 
			-文件操作
				-os.rename(原名,新名)	重命名
				-os.remove(文件名)		删除文件
			-目录操作
				-os.listdir(目录)		查看目录列表
				-os.mkdir(目录)			创建目录
				-os.rmdir(目录)			删除目录
				-os.getcwd() 			获取当前目录
				-os.chdir(目标目录)		修改工作目录
				-os.path.isdir(目录)	判断是否是文件
				-os.path.exists(文件)	当前目录是否存在文件
			-__import__('os').system('ls')  调用os模块操作系统控制台
		4) pygame 模块
			-初始化和退出
				-pygame.init() 			导入并初始化所有pygame模块
				-pygame.quit()			退出所有pygame模块
			-图像窗口
				-pygame.Rect(x,y,width,height)		描述一个矩形区域的位置
					-因为rect方法是数字处理,可以不受init()限制
					-rect变量.x 		得矩形窗口的x位置
					-rect变量.y 		得矩形窗口的y位置
					-rect变量.width 	得矩形窗口的width
					-rect变量.height 	得矩形窗口的height
					-rect变量.size 		得矩形窗口的width,height(元祖)
					-rect变量.top 		得矩形窗口的y-height位置
					-rect变量.bottom 	得矩形窗口的y+height位置
					-rect变量.left	 	得矩形窗口的x-width位置
					-rect变量.right 	得矩形窗口的x+width位置
					-rect变量.centerx	得矩形窗口的x+0.5*width 
					-rect变量.centery	得矩形窗口的y+0.5*height
				-图片名.get_rect()		获取图片的位置信息
			-创建游戏主窗口
				-pygame.display.set_mode()		初始化游戏显示窗口
					-参数：
						resolution=(0,0) 	屏幕的宽高,默认与屏幕大小一样
						flags = 0			指定屏幕的附加选项
						depth = 0 			颜色的位数,默认自动匹配
				-pygame.display.update()		刷新屏幕内容显示
			-理解图像并实现图像绘制
				-pygame.image.load("图片路径")		指定路径加载图片
				-窗口名.blit(image_name,(x,y))		在指定位置绘制图像
				***绘制完图像后要刷新屏幕显示pygame.display.update()***
			-游戏时钟
				-clock = pygame.time.Clock() 		创建时钟对象
				-clock.tick(X)						设置刷新率为X/秒							
			-监听事件
				-pygame.event.get() 	可以获取用户做的事件列表
				-event.type				监听到的事件类型(数字)
					-点击退出			12
					-鼠标位置			4
					....
				-pygame.QUIT			12
			-精灵和精灵组	
				-pygame.sprite.Sprite	存储image和rect的对象
					-精灵.image			记录图像数据	
					-精灵.rect			记录屏幕上位置
					-精灵.update(*args)	更新精灵位置
					-精灵.kill()		将精灵从所有组中删除
				-pygame.sprite.Group	
					-精灵组.__init__(self,*精灵)	
					-精灵组.add(*sprites)		向组中增加精灵
					-精灵组.sprites()			返回所有精灵列表
					-精灵组.update(*args)		让精灵组中精灵调用各自update方法
					-精灵组.draw(srceen)		将组中所有精灵image,绘制到主屏幕上去
			-定时器
				-pygame.time.set_timer()		每隔一段时间执行指定动作
					-set_timer(eventid, milliseconds)	
						-eventid 		事件代号
							基于 pygame.USEREVENT 来指定
						-milliseconds	事件触发事件,单位:ms
				-等于创建了个新事件,代号是自定的,用来判断
			-按键事件	
				1.按键代号,特点：按一次处罚一次
				-pygame.KEYDOWN				事件被按下的代号	
					-判断event.type == pygame.KEYDOWN就能知道键盘是否被按下
				-pygame.K_RIGHT				右键被按下的代号
				-event.key					被按下键的代号
					-判断event.key == pygame.K_RIGHT 右键是否被按下
				2.按键元祖,特点：持续的返回元祖
				-pygame.key.get_pressed()	返回按键元祖
				-返回值[pygame.K_RIGHT]		右键是否被按下			
				-pygame.K_RIGHT				右键在返回按键元祖的索引275
			-碰撞检测
				-pygame.sprite.groupcollide()	两个精灵组的碰撞检测
				-参数(group1, group2, dokill1, dokill2, collided = None)
					精灵组1,精灵组2,杀死1,杀死2,碰撞回调 
					-collided 用于计算碰撞的回调函数
						-如果没有指定,则每个精灵必须有个rect属性
					-dokill 是 布尔类型,Ture杀死,False不杀死
				-pygame.sprite.spritecollide()	精灵和精灵组的碰撞检测
				-参数(sprite, group, dokill, collided = None)
					精灵,精灵组,杀死精灵组,碰撞回调 
					-collided 用于计算碰撞的回调函数
						-如果没有指定,则每个精灵必须有个rect属性
					-返回精灵组中跟精灵发生碰撞的精灵列表
		5) pyinstaller 将.py转成可执行文件.exe
			1.首先安装pyinstaller模块,
			2.将需要转换的py文件复制进.\venv\Scripts目录
			3.Cmd进入控制台：
			4.pyinstaller -F XX.py 打包(XX.py为主入口程序)
			5.目录会生成的dist文件夹
			6.将素材包复制进去
			7.完成
			-常用选项：
				-F 	产生单个可执行文件
				-D	产生一个目录可执行文件
				-a	不包括Unicode字符集支持
				-d	产生debug版本的可执行文件
				-w 	指定程序运行时不显示命令行窗口
				-c	指定使用命令行窗口运行程序
				...			
		6) urllib库 内置库不需要安装
			-pasre模块
				-pasre模块.urlencode()		将键值对型转换成字符串
					-实例：
						# import urllib.parse
						# data = {"a": 1,
						#         "b": 2,
						#         "c": 3}
						# x = urllib.parse.urlencode(data)
						# print(x) # 得 a=1&b=2&c=3
						
		7) requests模块
			-requests.get(url)			请求url链接,返回响应结果response
			-响应.status_code			响应的状态值
			-响应.json()				响应的json内容
			-响应.content				响应的bytes对象
				
		8) hashlib模块
			-hashlib是一个提供字符加密功能的模块
			-hashlib.md5()					md5加密模块,返回
				-md5实例.update("字符串".encode('utf-8'))	
											将字符串载入md5实例中,加密
				-md5实例.hexdigest()		获得md5实例的16进制md5显示。
			
			 
	-模块别名
		-如果模块字太难打了,导入时可以取个别名
		-import 模块名 as 模块别名
		-别名要符合大驼峰命名法
		
	-只导入模块中部分工具
		-格式：from 模块名 import 工具名
		-好处:不需要通过 模块. 调用,
		      直接使用模块提供的工具---全局变量,函数,类
		-注意事项:
			-如果两个模块,存在同名的,那么后导入的会覆盖先导入的
				*可以使用别名让其不冲突
		-可以使用from...import * 将工具包所有内容导入(不推荐)
	
	-python的模块都设置有一个__file__属性
		-模块.__fire__  可以查看模块的路径
		
	-模块设计原则
		-一个独立的python文件就是一个模块
		-导入的文件中任何没有缩进的代码都会执行一遍
		-__name__属性
			-如果被导入模块执行：输出的结果是模块名
				模块名1.__name__ # 得 模块名1
			-如果被自身执行：输出的结果时__main__
				__name__ # 得 __main__
			*利用他的以上特性：可以判断他是模块还是自身然后输出测试内容
			-例子
				# if __name__ == "__main__":
				#    print("需要执行的测试内容")
	
	-包
		-概念：
			-包是一个包含多个模块的特殊目录
			-目录下有一个特殊文件__init__.py
			-包名的命名方式和变量名一致
		-特点：
			-使用 import 包名 可以一次性导入包中所有模块
		-新建包的过程：
			1.新建一个包目录
			2.在目录下建__init__.py文件
			3.在目录下建模块文件
			4.在__init__.py里面写：
				from .(当前目录) import 模块名 
			  来搭接模块和包
			 
	-发布模块
		-自己百度
		
	
  14.转义字符(字符串中) \
	-\t   制表符  协助输出文本垂直方向保持对齐
		# print("1\t2\t3")
	-\n   换行符   # 到下一行
	-\r   回车     # 到该行的首位
	-\\   反斜杠
	-\'   单引号
	-\"   双引号

  15.函数
	-把‘具有独立功能的代码块’组织为一个小模块,在需要的时候调用
	-格式:
		def 函数名():
			内容(前面4个空格)
			...
	-调用其他程序的函数
		import 文件名.py 
		文件名.函数名()
	-函数用"""注释"""来注释
		-官方规定:函数上方空两排
		-ctrl + q 可以跳出注释文档
	-函数的参数：形参和实参
		-同Script一样
	-函数的返回值 return
	例1 # def sum(num1,num2):  
		#    return num1+num2
		# result = sum(10,20)
		# print(result)
	
  16.高级变量类型
	-列表(数组)list：
		-格式：list = ["数据1","数据2","数据3"]
		-索引从0开始
		-列表名[索引]  提取列表中对应索引的数据
		-方法:
		  -列表名.     查看列表的方法有哪些
			--增加--
			-列表名.insert(索引,数据)  在指定位置插入数据
			-列表名.append(数据)       在末尾追加数据
			-列表名.extend(列表2)      将列表2的数据追加到列表
			--修改--
			-列表名[索引] = 数据       修改指定的数据
			--删除--
			-del 列表[索引]            删除指定索引的数据(内存中删除)
			-列表名.remove[数据]       删除第一个出现的指定数据
			-列表名.pop				   删除末尾的数据
			-列表名.pop(索引)          删除指定索引的数据
			-列表名.clear              清空
			--统计--
 			-列表名.count(数据)        数据在列表中出现的次数
			-len(列表)                 列表长度
			--排序--
			-列表名.sort()             升序排序
			-列表名.sort(reverse=True) 降序排序
			-列表名.reverse()          反转/逆序
		*列表最好只放一种数据类型(放了也无所谓),不然拼接时不好用

	-元祖tuple：
		-基本情况类似于数组
		-不同于数组的地方：
			-第一:定义元祖是 ()
			-第二:元祖里面的元素不能被更改
		-格式: 元祖名=('元素1','元素2','元素3')
		-使用元祖的数据: 元祖名[索引]
		-元祖方法：
			-元祖名.count(数据)    数据在元祖中出现的次数
			-元祖名.index(数据)    数据在元祖中的索引
		*元祖可以放多种数据类型
		*Python特性, 自动从
	*python中会自动忽略(),直接读取数据,因此元祖放1个数据需要(元素,)
		-元祖的应用场景:
			-函数的 参数 和返回值
				-def()的()就是个元祖
			-格式化字符串
				-("我的年龄：%d" % ("1",)) 的()也是元祖
			-让列表不可以被修改
				-元祖特性,安全第一
				
	-字典(对象)dictionary:
		-格式 dictionary = {'键1':值1,'键2':值2}
		-键是唯一的
		-值可以是任意数据类型;
		 键只能是：字符串,数字,元祖
		-取值: dictionary["键1"]	
		-方法:
			 ----增加--
			-dictionary["新键名"] = 值
			 ----修改--
			-dictionary["已有键名"] = 值
			 ----删除--
			-dictionary.pop["键名"]
			 ----统计数量--
			-len(字典名)
			 ----合并--
			-字典.update(被合并字典)
			*如果被合并字典与字典的键重复,被合并的字典覆盖字典的键
			 ----清空--
			-字典名.clear() 
			 ---查找---
			-字典名.get("XX")	查找指定XX键的值并返回
		-字典的循环遍历
			-for k in dictionary:
				 k - dictionary[k] （k：键名）
		-应用场景:
			-用来存储一个物体的信息
			-将字典放在列表中,进行遍历,对每个字典都进行相同处理
	
	-元祖和列表的转换:
		-list(元祖)   :元祖转成列表
		-tuple(列表)  :列表转成元祖
	
	-公共方法item
		-列表,元祖,字典都可以用的方法
		-Python内置函数
			-len(item)   计算容器中元素的个数
			-del(item)   删除变量
			-max(item)   返回容器最大值
			-min(item)   返回容器最小值
				-如果是字典,只比较key
			-cmp(item1,item2)  比较两个值
				-返回值:-1 小于/0 等于/1 大于
				-python3以后没有cmp
			-可以直接运算符比较
				# (1) < (2)
				-字典不能比较
		-切片 (参考字符串切片)
			-列表,元祖 是有序的,可以切片
			-字典 是无序,不能切片
		-运算符
			+    合并          字符串,列表,元祖
				- +号        产生新列表
				- .extend()  将数据追加
					# [0,1,2].extend([3,4])
					# 结果为: [0,1,2,3,4]
				- .append()  会将追加内容当一个参数进行追加
					# [0,1,2].append([3,4])
					# 结果为: [0,1,2,[3,4]]
			*    重复          字符串,列表,元祖
			in   元素是否存在  字符串,列表,元祖,字典
				# 3 in (1,2,3)
			not in   元素是否不存在  字符串,列表,元祖,字典
				-in,not in 只会判断字典的key
			比较运算符  比较   字符串,列表,元祖
		-完整的for循环
			for 变量 in 集合:
				循环体代码
			else:
				遍历完成后执行的代码(for里break了就不会执行)
	-数字<大写字符<大写字符(Unicode编码顺序)
		
  17.关键字,函数,方法的区别
	-关键字 后面不需要加()
	-函数   函数(参数)
	-方法   对象.方法(参数)
	
  18.字符串
	-定义一个字符串"",''都可以
	方法:
		-len(字符串)      获取字符串的长度
		-大字符串.count(小字符串)   小字符串在大字符串中出现的次数
		-字符串[索引]    获取字符串中的当字符
		-大字符串.index(小字符串)   小字符串在大字符串中第一次出现的索引
		---判断类型的方法----	
			-string.isspace()   是否只包括空格
			-string.isalnum()   是否字符串中都是字母或者数字
			-string.isalpha()   是否字符串中都是字母
			-string.isdecimal() 是否只包括都是全角数字
			-string.isdigit()   是否数字,编码数字
			-string.isnumeric() 是否只包括全角数字,汉字数字,编码数字
			-string.istitle()   是否是标题化(每个单词首字母大写)
			-string.islower()   是否字母都是小写
			-string.isupper()   是否字母都是大写
		---查找和替换-----
			-string.startswith(X)  检查字符串是否以X开头
			-string.endswith(X)    检查字符串是否以X结尾
			-string.find(X,start=0,end=len(string))        
				检查字符串中是否有X(可以指定检查范围),返回索引,失败返回：-1
			-string.rfind(X,start=0,end=len(string))
				从字符串结尾往前面检查(类似于find)
			-string.index(X,start=0,end=len(string))
				同find，如果找不到会报错
			-string.rindex(X,start=0,end=len(string))
				同index,不过是从右到左
			-string.replace(old,new,p[,num])
				new替换old，num指定替换的次数(可选)
		---大小写转换---
			-string.capitalize()  把字符串第一个字符大写
			-string.title()       把字符串的每个单词首字母大写
			-string.lower()       所有大写转成小写
			-string.upper()       所有小写转成大写
			-string.swapcase()    大小写翻转
		---文本对齐---
			-string.ljust(长度)       
			 返回一个原字符串的左对齐,并使用空白填充长度的新字符串
			-string.rjust(长度)       
			 返回一个原字符串的右对齐,并使用空白填充长度的新字符串
			-string.center(长度)      
			 返回一个原字符串的居中,并使用空白填充长度的新字符串
		---去除空白符---
			-string.lstrip()  截掉左边开始的空白符
			-string.rstrip()  截掉右边开始的空白符
			-string.strip()   截掉两边开始的空白符
		---拆分和连接---
		-string.partition(str)
			-把string分成3个元素的元祖(str左,str,str右)
		-string.rpartition(str)
			-类似于partition 不过是从右边开始找str
		-string.split(str="",num)
			-以str为分隔符切string,num可规定分割次数, str(默认\r,\n,\t,空格)
		-string.splitlines()
			-按照行(\r,\n,\r\n)分隔,返回一个元素列表
		-string.join(seq)
			-以string为分隔符,将seq里的所有元素合并为一个新字符串
		---字符串切片---
			-string[开始索引:结束索引:步长]
				-步长指：切片字符的跨距
				-索引可以是负数
					-1 代表 倒数第一个
					# num[0:-1]  从 第一个 到 倒数第二个
				-步长可以为负数
					# num[::-1]  从 倒数第一个 到 第一个 

  19.变量进阶
	-概念
		-变量和数据都是保存在 内存 中的
		-变量和数据是分开保存的,数据保存在内存的一个位置,变量保存数据地址
		-可以用id()函数来查看变量保存数据的地址
		-调用函数时,本质上使用的是实参保存数据的引用,而不是实参保存的数据
		-函数的返回值也是通过引用传递的
	-可变和不可变类型
		-不可变类型
		不能被修改,各自对应响应的内存地址
		  -数字类型
		  -字符串
		  -元祖
		-可变类型
		使用方法其内部数据发生变化,但是内存地址不发生变化
		  -列表
		  -字典
			-字典的key只能用不可变数据类型
	-哈希函数 hash()
		-算法,提取数据的特征码(指纹)
		-接受一个不可变类型的数据作为一个参数,返回结果是一个整数
		科普：在python中设置键值对时,对key进行了hash决定,为方便后续的增删改查
	-局部变量,全局变量
		-全局:函数外部定义的变量,所有函数都能用
		-局部:函数内部定义的变量,只有函数内部能用
		规范：在函数内,可以通过全局变量引用数据
			  但是在函数能不能直接修改全局变量的引用(赋值)
		-函数内部修改全局变量global:
			-global 变量名 	  声明的全局变量函数内部可修改
		-全局变量起名:
			-以g_或者gl_开头
	
  20.函数高级
	- 函数参数和返回值的作用
		-参数：外界希望函数内部能处理的函数
		-返回值：向外界返回函数执行的结果
	- 返回值 进阶
		-返回值可以返回多个数据,以元祖的形式进行返回,同时元祖可以省略
			# return shuju1,shuju2 == return (shuju1,shuju2)
		-返回元祖,多个变量接受
			# 变量1,变量2 = (shuju1,shuju2)
			-当使用多个变量接受结果时,变量个数要与元素个数一致
			-例1：交换a,b的值
				a,b=(6,100)
				# 解法1
				c = a
				a = b
				b = c
				# 解法2
				a = a + b
				b = a - b
				a = a - b
				# 解法3(python专有)
				a,b = b,a (其实右边是个元祖,()省略了)
	- 函数的参数
		-函数内部,对参数进行赋值,不会影响实参
		-如果参数是个可变类型,函数内部使用方法修改内容,可修改外部参数
		-列表使用+=赋值运算时,不是相加再赋值,而是调用了extend()这个方法
	- 缺省参数
		-定义：给某个参数指定一个默认值
		-作用：如果一个函数有形参,但是没有传递参数,就使用默认值
		-格式：方法名(形参=默认值)
		-实例：
		  # def print_info(name,gender=True):
				gender_text = "男"
				if not gender:
					gender_text = "女"
				print("%s是%s" % (name,gender_text))
			print_info("小花",False)  # 小花是女生
			print_info("小花")  # 小花是男生
		-注意事项：
			1)缺省参数的位置
				-在定义了带有默认参数的缺省参数时,在参数的末尾
				# def print_info(name,title,gender=Ture): # 正确 
				# def print_info(name,gender=Ture,title): # 错误 
			2)如果一个函数有多个缺省函数时
				-在调用函数时,需要指定参数名
				-如果不指定,按顺序传递参数
				# def print_info(name,title="",gender=Ture) 
				  print_info("小明",gender=False)
	- 多值参数
		-定义：有的函数其参数个数不确定,能传递任意个数的参数 叫 多值参数
		-格式：参数名前加* 可以接受元祖
				*args  元祖参数	(arguments 有变量的含义)
			   参数名前加** 可以接受字典
				**kwargs  字典参数(keyword,键值对参数)
		-实例：
			# def demo(num, *args, **kwargs):
			#     print(num)      #  得 1
			#     print(args)	  #  得 (2,3,4)
			#     print(kwargs)   #  得 {name:"HHH"}
			# demo(1, 2, 3, 4, name="HHH")	
		-应用实例：
		例1 # def demo(*args):
			#     n = 0
			#     for num in args:
			#         n += num
			#     print(n)    # 得 15
			# demo(1 , 2, 3, 4,5)			
		-元祖和字典的拆包
			-定义：使用函数时,想将多值参数,相对应的传入
			-格式：函数(*元祖,**字典)
			-实例：
				# def demo(*args, **kwargs):
				#     print(args)     # (1, 2, 3, 4)
				#     print(kwargs)   # {"name": "HHH"}
				# gl_nums =(1, 2, 3, 4)
				# gl_dict = {"name": "HHH"}
				# demo(*gl_nums,**gl_dict)
	- 函数的递归
		-定义:函数内部 自己调用自己
		-特点:1.函数内部的代码是相同的,只针对参数不同,处理结果不同
			  2.(重要)当参数满足一个条件时,函数不再执行,否则死循环
		-实例:
		例1 # def demo(num):
			#     print(num)
			#     if num == 0:
			#         return
			#     demo(num - 1)
			# demo(3)   # 得 3 2 1 0
		------------------------------
		例2 # def demo(num):
			#     if num == 0:
			#         return 0
			#     temp = demo(num - 1)
			#     return num + temp
			# print(demo(3)) # 得 6
		解析：第一个return不是return当前这个函数,而是returen循环内部的函数
			  第二个return才是return当前函数,temp是执行多次函数过后的值,num依然是3

 --------------pyhton的面向对象(OOP)--------------------------------
	-基本概念:应对复杂的项目开发,提供固定套路

 21.类和对象
	-概念
		-类: 对相同属性和方法的统称(负责创建对象)
		-对象: 由类创建出来的具体存在
		-类定义了什么属性和方法,对象就有什么属性和方法
	-命名规则:
		-类名：大驼峰命名法，提取整个业务出现的名词
		-属性：对象的特征
		-方法：对象具有的行为(动词)
		
  22.面向对象基础语法
	-dir内置函数：dir():
		-标识符/数据后加.然后按下tab键,ipython会提示该对象方法列表
		
		-使用内置函数dir传入标识符/数据可以查看对象的全部属性和方法
			-其中__方法__格式是Python提供的内置方法和属性
			
		-常见的内置方法/属性：
			01.__new__   创建对象时,会被自动调用
			02.__init__  对象被初始化时，会被自动调用
			03.__del__   对象被在内存中销毁前，会被自动调用
				- __del__,一般对象在全局中产生时,会在所有代码执行完后执行
				- 也可以提前用del()把对象从内存中删除
			04.__str__   返回对象的描述信息,print函数输出使用
				-改造 print(对象) 返回的数据(之前是返回内存地址,类)
				-实例：def __str__(self):
					       return "我是哈哈哈"
				
	-定义简单类(只包括方法)
	   格式：class 类名:		
				def 方法1(self,参数):
					pass				
				def 方法2(self,参数):
					pass 
	-创建对象
		-格式：对象变量 = 类名()
		-直接打印一个对象变量时,能输出这个变量引用对象由那个类创建的
		 以及内存地址(16进制)
		-格式化输出 中%d 以10进制输出数字
					  %x 以16进制输出数字
		-每次调用的对象变量接受类时,其都是开一个新内存保存类
			例如 tom1 = Cat()  与 tom2 = Cat() 两个内存地址不一样
	-方法中的self
		-给对象增加属性(不推荐使用)
			-格式:对象变量.属性名 = 值 
		-self
			-那个对象调用的方法,self就是那个对象的引用
			-调用方法时,不需要传递self参数
			-方法内部：
				-可以通过self.访问对象的属性
				-也可以self.调用其他的方法
			例1 # class Cat:
				#     def eat(self):
				#         print("%s吃" % self.name)
				#     def drink(self):
				#         print("喝")
				# a = Cat()
				# a.name = "猪在"
				# a.eat()  # 得 猪在吃
	-初始化方法__init__
		-在创建类名时,会自动调用__init__方法,根据这个特性可以初始化方法
		-实例：
		例1 # class Cat:           
			#     def __init__(self):
			#         print("开始")
			# Tom = Cat()   # 得 开始
	-----------------------------------------------
		例2 # class Cat:  
			#     def __init__(self):
			#         self.name = "张三"
			# Tom = Cat()
			# print(Tom.name)   # 得 张三	
	------------------------------------------------
		例3 # class Cat:
			#     def __init__(self,new_name):
			#         self.name = new_name
			# Tom = Cat("张三")
			# print(Tom.name) # 得 张三	
	
  23.私有属性和方法
	-私有属性:只想对象内部使用的属性
		-格式: self.__属性名 = 值(初始化时)
		-在初始化定义属性时,在属性名前面加__;
		-例子:
			# def __init__:
			#	  self.__name = "张三"
	-私有方法:只想对象内部使用的方法
		-格式: def __方法名:
		-在自定义的方法名前面加__;
		-例子:
			# def __fire:
			# 	  pass
	*在python中没有真正的私有,所谓的私有不过都是对名称特殊处理
	-外界访问 私有属性和私有方法
		-__属性/方法名后会在其前面加上_类名
		-格式: _类名__属性/方法名  能访问私有的属性和方法

  24.继承
	-实现代码的重写,相同代码不需要重复编写
	-单继承
		-概念：子类拥有父类的方法和属性
		-格式:class 子类(父类):   
		-专业术语:子类(派生类), 父类(基类), 继承(派生)
		-传递性: 父类属性可以一直向下传递
		-方法的重写：
			-覆盖型
				-如果子类中重写父类的方法
				 会使用子类对象调用方法时,会调用子类的方法,
			-扩展性super()
				-在覆盖的基础上,可以用super()这个特殊类调用其父类们的方法
			-super()
				-特殊的类
				-调用父类封装的方法
			-扩展性super()（pyton2版本的方法,不推荐）
				-格式: 父类名.方法(self)
		-父类的私有属性和私有方法
			-1.子类不能再自己的方法内部直接访问父类的私有属性/方法
			-2.可以通过父类调用自己的私有属性/方法然后传给子类
	-多继承
		-概念:一个子类有多个父类
		-格式:class 子类(父类1,父类2):
		-注意事项：如果父类之间有同名的属性/方法,尽量避免多继承
			-如果遇到了同名,会优先使用先继承的父类的方法
		-内置属性__MRO__:
			-查看当前类的所有父类,与其的方法顺序
		-新式类和旧式类
			-新式类：继承了object为父类
					python3 会自动继承object类
			-旧式类：不继承了object为父类
					python2 不指定继承object就不会自动继承
	**如果父类不是object,一定要super()调用下__init__保证父类正确执行
	
  25.多态
	-不同子类对象调用相同父类方法,产生结果不同
	-特点:1.增加代码的灵活性
		  2.继承和重写父类方法	
		  3.不影响类的内部设计
	
  26.类属性	
	-类的结构
		-术语---实例:
			- 1.使用面向对象开发,第一步是设计类
			- 2.使用类名()创建对象,有两部：
				1) 在内存中为对象分配空间
				2) 调用初始化方法__init__为对象初始化
			- 3.对象创建后,内存中就有一个对象存在---实例
			- 创建出来的对象叫做 类 的 实例
			- 创建对象的动作叫做 实例化
			- 对象的属性叫做 实例属性
			- 对象的方法叫做 实例方法
		-类 是一个特殊的对象
			-class A: 定义的类属于 类对象
			-obj = A() 属于 实例对象
			-类对象也可以定义属性和方法
			 之前设定的self.属性是实例的属性和方法
		-类属性 和 实例属性
			-概念： -类属性是类对象中定义的属性
					-通常用来记录与类相关的特征
			-例子:
				# class Person:
				#     count = 0
				#     def __init__(self,name):
				#         self.name = name
				#         Person.count += 1
				# zhangsan = Person("张三")
				# print(zhangsan.count) //得 1
			----上述类属性可以计数类被实例化的次数
	-python属性获取机制
		-访问类属性的两种方式：
			-1：类名.类属性
			-2：对象.类属性(不推荐)
		-对象.类属性 ：首先在对象内部查找对象属性,然后向上查找类属性	
		-例子：
			# class Person:  (修改对象属性和类属性的同点)
			#     count = 0
			#     def __init__(self,name):
			#         self.name = name
			#         Person.count += 1
			# zhangsan = Person("张三")
			# lisi = Person("李四")
			# lisi.count = 99
			# wangwu = Person("王五")
			# print(wangwu.count)  # 得 3
			# print(lisi.count)  # 得 99
	    ------------------------------------------------
		
  27.类方法
	-概念:类方法就是针对类对象定义的方法
		-在类方法内部可以直接访问类属性或者调用其他的类方法
	-格式:  @classmethod
			def 类方法名(cls):
				pass
		-那个类调用的方法,cls就是那个类的引用
		-cls参数和实例方法的第一个参数self类似
		-提示:其他名称也可以,不过习惯使用cls
	-在方法内部：
		-可以通过cls.访问类的属性
		-也可以通过cls.调用其他的类方法
	-通过类名.调用类方法,调用方法时,不需要传递cls参数

  28.静态方法
	-概念：既不用类属性,也不用对象属性时,这个方法可以是静态方法
	-格式：@staticmethod    (静态方法没有需要传入的)
			def 静态方法名():
				pass
	-调用:  类名.静态方法
	-静态方法能在没有任何对象的情况下就创建
	
	方法总结：
		-实例方法:内部需要访问实例属性,
				  实例方法内部可以访问到 类属性
		-类方法:方法内部只需要访问类属性
		-静态方法:方法内部,不需要访问类属性和实例属性
	
  29.单例
	-单例设计模式
		-目的：让类创建的对象,在对象中只有唯一一个实例
		-每次执行类名()返回的对象,内存地址都是相同的
		
	-__new__内置函数
		-类的内置函数，作用为：
			1.为对象分配空间
			2.返回对象的引用
		-重写__new__方法一定要return super().__new__(cls)
		-例子：
			# class Game:
			#     def __new__(cls, *args, **kwargs):
			#         print("初始化成功")
			#         instance = super().__new__(cls)
			#         return instance		
	-实际作用: 1.需要生成唯一序列的环境
			   2.需要频繁实例化然后销毁的对象。
			   3.创建对象时耗时过多或者耗资源过多，但又经常用到的对象。
			   4.方便资源相互通信的环境
	-单例的对象创建使用的内存始终都是固定的那个
		-例子：
			# class Game: (正常的单例)
			#     instance = None
			#     def __new__(cls, *args, **kwargs):
			#         if cls.instance is None:
			#             cls.instance = super().__new__(cls)
			#         return cls.instance
	-如何让__init__这个函数只对第一个对象调用
			# class YearDay: 
			#     init_flag = Flase
			#     def __init__(self):
			#         if YearDay.init_flag:
			#             return
			#         print("第一次") 
			#		  YearDay.init_flag = True

  30.异常
	-概念:遇到错误,停止程序,提示错误信息。
	-捕获异常
		1)简单的捕获异常语法
			-对某些代码的执行不能确地是否正常执行
			-格式:
				try:
					尝试执行的代码
				except:
					出现错误的处理
			-例子：
				# try:
				#     num = int(input("请输入数字:"))
					  print(num)
				# except:
				#	  print("请输入正确的数字")
		2)异常捕获完整语法
			-语法
				try:
					尝试执行的代码
				except 错误类型1:
					出现错误类型1的处理
				except (错误类型2,错误类型3):
					出现错误类型2,错误类型3的处理
				except Exception as result:
					print("未知错误%s" % result)
				else:
					没有异常执行的代码
				finally:
					无论是否有异常都执行的代码
		3)异常的传递
			-概念：出现异常的地方如果没有处理会追朔到上级查看异常,
			       会一直传递到最终出错的地方,显示程序错误。
			-利用传递性,可以在主程序中捕获异常进行处理,不需要在方法里捕获了
			-实例：
				# def demo1():
				#     return int(input("请输入整数"))
				# def demo2():
				#     return demo1()
				# try:
				#     print(demo2())
				# except Exception as result:
				#     print(result)
		4)抛出raise异常
			-概念：除本身代码的异常外,还可根据业务主动抛出异常
			-可以自定义异常,再进行处理
			-格式: 变量 = Exception("自定义异常内容")
				   raise 变量
			-例子：
				# def demo1():
				#     num = input("请输入整数")
				#     if len(num) >= 8:
				#         return num
				#     ex = Exception("请输入8位数以上")
				#     raise ex
				# try:
				#     print(demo1())
				# except Exception as result:
				#     print(result)
		
		5)with  try的简化法
			-格式
				with context [as var]:
					pass
			-其中的context是一个表达式，返回的是一个对象，
			 var用来保存context表达式返回的对象，可以有单个或者多个返回值。
			-with发生了异常也会关闭程序。
			
			
  31.文件的基本操作	
	-操作分类：
		-1.打开文件
		-2.读、写文件
			读:将文件内容读入内存
			写:将内存内容写入文件
		-3.关闭文件
	-操作文件的函数/方法
		-open() 	打开文件,并返回文件操作对象	
		-read() 	将文件内容读取到内存
		-write() 	将指定内容写入文件
		-close() 	关闭文件
	-实例：
		# file = open("1.py",encoding="utf-8")
		# text = file.read()
		# print(text)
		# file.close()
	-文件指针
		-概念：指向文件读取的地方
		-默认：打开文件指针指向开头，读取文件指针指向结尾
		-read()读取文件会将指针指向结尾,再调用read()将读取不到内容
		-可以指定指针指向来获取想要的数据
	-打开文件的方式：	
		-默认:open以只读方式打开
		-r 只读，指针在最前面，文件不存在抛出异常
		-w 只写，原文件存在,写入的东西会覆盖原文件内容
				 若原文件不存在,创建文件,并写入
		-a 追加，打开文件指针指向最后，追加写入内容,
				 若原文件不存在,创建文件,并写入
		-r+ 读写，指针在最前面，文件不存在抛出异常
		-w+ 读写，原文件存在,写入的东西会覆盖原文件内容
				  若原文件不存在,创建文件,并写入
		-a+ 读写，打开文件指针指向最后，追加写入内容,
				  若原文件不存在,创建文件,并写入
		-rb	以二进制读方式打开，只能读文件 , 
				  如果文件不存在，会发生异常    
		-wb	以二进制写方式打开，只能写文件
				  如果文件不存在，创建该文件；
				  如果文件已存在，先清空，再打开文件
	-按行读取文件内容
		-readline() 一次只读一行内容,同时指针移动到下一行
		-实例：
			# file = open("ltt_003_python.text",encoding="utf-8")
			# while True:
			#     text = file.readline()
			#     if not text:
			#         break
			#     print(text,end="")
			# file.close()
	-实例，复制粘贴文件
		# file = open("ltt_003_python.text",encoding="utf-8")
		# file1 =open("文哥的复制粘贴","w")
		# while True:
		#     text = file.readline()
		#     file1.write(text)
		#     if not text:
		#         break
		# file.close()
	
	
  32.eval函数
	-概念:eval() 将字符串当成有效的表达式来求值并返回计算结果
	-实例：
		例1：eval("1+1")    	 # 得 2
		例2：eval("'*'*5")		 # 得 *****
		例3：eval("[1,2,3]")    # 得 [1,2,3]
		实例4：
			# input_str = input("请输入计算题")
			# print(eval(input_str))	
	-自我认识：去掉字符串的引号
	**特别声明:千万不要使用eval()来转换用户input输入的内容**
	如果用户输入"__import__('os').system('XX')"这样的内容甚至可以攻击计算机
	所以实例4是个错误的示范	


  33.游戏设计
	-概念：游戏循环的开始意味着游戏正式开始
	-组成部分：
		-游戏初始化：设置游戏窗口,绘制图像初始位置,设置游戏时钟
		-游戏循环：设置刷新率,检测用户交互,更新图像位置,更新屏幕显示		
  
  
  34.python爬虫
	-控制台里NETwork：查看Http/Https 请求详细信息
	-需要 模块request和urllib库的pasre模块
	-常见请求响应结果
		-200	请求成功
		-300	多种选择
		-400	错误请求(语法错误)
		-404	未找到网页
		-405	方法禁用
		-500	服务器内部的错误	
	-步骤：
		-1.ajax请求,返回json
		-2.根据返回的json,获取图片地址和标题,并yield返回
		-3.遍历返回的yield值,获取每张图的url和title
		-4.根绝md5编码创建名字,获取url的二进制
		-5.根据url二进制保存图片


  35.迭代器yield
	-yield与return相似,但是他不会让函数终止,可以继续执行函数
	-同时yield返回的是一个对象,需要实例化后用next()函数来获取返回值
	-下次调用next()后都会执行之后yield的东西
	-实例：
		# def aaa():
		#     n = 0
		#     yield n
		#     n += 1
		#     yield n
		# a = aaa()
		# print(next(a))	# 得 0
		# print(next(a))	# 得 1
	-遍历ylied返回的值
		# def aaa():
		#     n= 0
		#     while n < 3:
		#         yield n
		#         n += 1
		# for item in aaa():
		#     print(item)	# 得 0 1 2

  36.range函数	
	-创建一个整数列表
	-格式：range(start, stop[, step])
	-实例：
		range(10)        # 从 0 开始到 10
		[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
	
	
	
	
	
	
	
	
	

  99.其余项
	-让python2版本解释器能以中文处理文件：	
		# *-* coding:utf-8 *-*  （声明utf-8处理文件）
	-Python2就算声明了utf8,但是他遍历字符串的时候是以字节为单位的,会出现中文乱码
	 为了使遍历的时候知道他是utf8的格式,需要在字符串前面加u
		# str = u"Hello世界"
	-常量和变量
		-常量,命名规范：
			-所有字母大写,单词间用_分割
			-表达一个固定的数值
		-变量,
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	