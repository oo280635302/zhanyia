  
  1.计算机网络
	-ISP(internet service provider)	因特尔互联网提供商网络
	-计算设备：主机(hosts)=端系统(end systems) 如：电脑,手机,家用电器设备
	-通信链路：光纤,铜缆...
	-分组交换(交换网络)：转发分组数据包 设备如：路由器,交换机
	
	-internet是为 网络应用 提供通信服务的基础设施：
		-网络应用：web,网络游戏,email
	-internet是为 网络应用提供应用编程接口(api)：
		-支持网络应用连接internet,发送/接受数据
		-提供数据传输服务
		
	-硬件设施+网络协议才能保证应用有序交付
 
  2.网络协议
	-硬件为基础,协议为规则
	-协议三要素：
		-语法syntax：数据的结构与格式
		-语义semantics：即规定对数据的响应
		-时序Timing:时间顺序,速度匹配
	-internet协议标准：
		-RFC  request for comments
		-IETF  互联网工程任务组
	
  3.计算机网络的结构
	-网络边缘 为 主机host 
		-可以运行网络应用程序
		-c/s模型：
			客户与服务器进行交流,客户与客户之间不能直接交流
		-p2p模型(peer-peer):
			无服务器,主机与主机直接通信

	-接入网络,物理介质 为 有线或无线通信链路
		-将网络边缘接入到网络核心去(边缘路由器)
		-家庭/机构接入网络
			-家庭：通过路由器->调制器->电话线或者电缆线->isp
			-机构：以太局域网ethernet-机构路由器->isp
		-移动接入网络
			-无线局域网LANs(wifi)
			-广域无线网WAN(移动互联网)
		-网络带宽bps (网络带宽指:数据传输速率,单位:bps;通信带宽指:信号最高频率与最低频率之差,单位:hz)
			根据接入方式分为：共享/独占
		-接入网络：数字用户线路DSL
			-主线路:主机 -> dsl调制解调器(modem) -> 分离器 -> 多路复用器(dslam) -> isp
			-用电话线连接中心局DSLAM
				-数据通过dsl电话线接入internet
				-电话通过dsl电话线接入电话网
		-接入网络：非对称数字用户线路ADSL
			-上行(上传) 与 下行(下载)速率不同 就为非对称数字
			-将信号调制到不同频带上,通过不同频带载波传输
			-一般下行比上行快,是因为 下行都调到了高hz频带上
		-接入网络：电缆网络
		-主线路:主机 -> 电缆调制解调器(cable modem) -> 分离器 -> 端接系统(cmts) -> isp
			-用的电视电缆线路传输网络
			-通过平分多路复用,数据与电视信号共享线缆利用不同频率传播
			-对应DSLAM的电缆调制解调器(CMTS)
			-使用HFC:混合光纤同轴电缆
			-也是非对称的
			-各家庭共享 家庭->电缆头端 的接入网络
				-即带宽高,但可能比dsl或adsl速率慢
		
	-网络核心 为 相互连接的路由器等
		-关键：路由+转发
		-根据 数据的目的地址 与 路由带的本地转发表 将数据传输到正确的线路上去
		-路由：确定分组从源到目的传输路径(根据路由算法将目的地址转成输出链路)
		-转发：将分组从路由输入端口交换到正确的输出端口

  4.数据交换
	-根据连通性,网络规模建立交换网络
	-交换：
		-动态转接
		-动态分配传输资源
	-数据交换的类型：
		-电路交换：
			-建立连接-->通信-->释放连接
			-特点：独占资源
			-多路复用：
				-共享信道
				-链路/网络资源划分为资源片 -> 分配给各路 -> 每路独占分配达到的资源片进行通信
				-资源片可能idle,不能不同路共享
				-多路复用方法分为：
					-频分多路复用FDM-根据频率,例：电视
					-时分多路复用TDM-根据帧,每帧分为多个时隙
					-波分多路复用WDM-根据光的波长
					-码分多路复用CDM-根据码片序列,例：无线链路
		-报文交换：
		-分组交换：
			-将报文拆分后 + 上头信息 发送->收到后重组 
			-统计多路复用：
				-按需求的多少占用带宽
			-目前最主流的数据交换,更适用与计算机网络的数据交换
			-速度,占用缓存比分组低很多
		
  5.计算机网络体系结构
	-分层网络:
		-实体：表示任何可发送或者接受信息的硬软件进程
		-协议：同层通信的规则
		-服务：下一层相当于上一层的服务,同时上层不用关心下层的内容,只需要调用接口就行
	-OSI参考模型
		-数据封装->添加控制信息:
			-地址信息
			-差错编码检测
			-协议控制
		-物理层：传输比特
		-链路层：
			-加头加尾信息组帧
			-物理寻址,在帧头加物理地址标志数据的接受/发送端
		-网络层:
			-逻辑寻址,如ip地址
			-路由,路由分组转发至最终主机,路径选择
		-传输层：
			-将会话层的报文分段重组
			-sap寻址,如端口号
		-会话层：
			-对话控制的建立维护+同步数据
		-表示层
			-数据的加密/解密,压缩/解压
		-应用层：
			-通过网络接口使用网络服务
	-TCP/IP参考模型	
		-应用层：
			如：http,dns.smtp.
		-运输层：
			如：tcp,udp
		-网际层:
			如：ip
		-网络接口层
			如：网络接口
	-五层参考模型：
		-应用层,传输层,网络层,数据链路层,物理层

 6.网络应用的体系结构
	-socket是操作系统提供给 应用 的网络api
	
  7.网络应用对传输服务的要求+概述
	-要求：数据的丢失/可靠性,时间/延迟,带宽
	-tcp服务：
		-特点：
			-面向连接
			-可靠的传输
			-流量控制
			-拥塞控制
			-不提供延迟保障
			-不提供带宽保障
	-udp服务：
		-特点：
			-无连接
			-不可靠数据传输
			-不提供一些服务
	-web服务：
		-对象寻址URL：协议://主机名:端口号/文件地址
		-无状态：服务器不维护请求消息
		-路线:s80端口等待->c发送请求tcp->s收到请求tcp->c与s交换http消息->关闭tcp连接
  
  8.http连接：
	-早期http1.0:非持久性连接
	-现在http1.1:持久性连接
	-消息格式:
		-head：
			request line,head line
		-body
	-telnet http请求软件
	
  9.Cookie技术
	-概念：存储在用户本地终端上的数据
	-目的：辨别用户身份,进行session
	-cookie组件：
		-http响应请求消息的cookie头部行
		-保存在客户端主机上的cookie文件,由浏览器管理
		-web服务器后台数据库
	-用于：身份认证等..
 
  10.web缓存技术/代理服务器
	-在不访问服务器的前提下满足客户端http请求
	-特点：性能优化,减少流量,cdn网络..
	-过程：
		-用户先给缓存服务器发送请求
		-如果有就返回响应,没有就想原始服务器发送请求
	-条件性get：
		-请求消息有声明持有版本的日期 if-modified-since<date>
		-没有改动返回304 not modified,不包含对象

  11.DNS服务器-域名
	-作用：域名与ip之间的映射
	-可以做负载均衡
	-223.5.5.5 阿里域名服务器
	-dns资源记录分为：
		-type=A		key:主机域名	val:IP地址
		-type=Ns	key:域			val:该域的权威域名解析服务器的主机域名
		-type=CNAME	key:别名		val:真实域名
		-type=MX	key:邮箱		val:邮箱服务器地址
	-dns协议：查询query+回复reply
		-其消息格式是相同的
		-消息头：
			-identification		16位查询编号
			-flags				标价
			...
	-注册域名：
		1.域名管理机构-注册域名
		2.向域名管理机构提供来自权威域名解析服务器的名字和ip地址
		3.域名管理插入两条记录：NS+A
		4.域名解析插入：A+MX
		
  12.Socket编程
	-应用接口api
		-libPacp/winPacp linux/windows抓包库
	-当应用程序创建socket时,操作系统会分配一个数据接口存储socket相关信息
	-sockaddr_in
		struct sockaddr_in{
			u_char 	sin_len;		地址长度
			u_char 	sin_family;		地址簇(eg:tcp/ip使用的AF_INET)
			u_short sin_port;		端口号
			struct in_addr sin_addr;		IP地址
			char 	sin_zero[8];			置零
		}
	-winsock(windows的套接字)函数 - C
		-WSAStartup函数			创建winsock
			参数:使用winsock的版本,wsadata指针
		-WSACleanup函数			关闭winsock
		-Socket(protofamily,type,proto)		创建套接字,返回sd
			-protofamily协议簇	eg:PF_INET tcp/ip
			-type协议簇类型		
				-sock_stream	tcp传输层
				-sock_dgram		udp传输层
				-sock_raw		ip/icmp/igmp网络层(需要root权限)
			-proto协议号		默认0
		-Closesocket(sd)						关闭套接字
			-如多个进程共享一个套接字,会将套接字引用数减1,至到0成算关闭成功
		-int bind(sd,sockaddr_in,地址长度)		绑定ip地址
			地址通配符inaddr_any 意味着任意地址
		-int listen(sd,queuesize请求队列大小)	启动socket监听
		-connect(sd,地址,地址长度)				socket连接指定地址
		-accept(sd,caddr,caddrlen)				取客户请求,返回newsock
		-send,sendto						    发送数据
		-recv,recvform							接受数据
		-setsockopt								设置sd选项参数
		-getsockopt								获取sd选项参数
	-tcp将字节转换成网络字节-然后进行传输

  13.传输层
  	-基本理论与基本机制
  		-多路复用/分用
  		-可靠数据传输机制
  		-流量控制机制
  		-拥塞控制机制
  	-internet传输层协议
  		-udp	无连接传输服务
  		-tcp	面向连接的传输服务
  		-tcp拥塞控制机制
  	-网络层VS传输层
  		-网络层：提供主机之间的逻辑通信
  		-传输层：提供应用进程之间的逻辑通信机制
  			-位于网络层之上
  			-依赖网络层
  			-对网络层服务进行增强

  	-多路复用/分用 - 传输层
  		-复用：socket接受数据,为每块数据上头信息,生成segment,交给网络层
  			-多进程的信息 -> 1个网络层传输
  		-分用：根据头信息将收到的segment交给不同进程
  			-1个网络层来的消息 -> 分给多个进程
  		-无连接的多路分用(udp)
  			-头信息确定了目的ip+端口号
  			-当主机收到udp段后,检查目的端口号,将udp导向绑定该端口号的socket
  			-不会管源ip+端口是多少

  		-面向连接的分用(tcp)
  			-4元组标识：
  				-源ip,源端口,目的ip,目的端口
  			-服务可同时支持多tcp-socket
  				-每个socket用自己的4元祖标识
  			-1个客户机进程 对应 1个服务器进程(或者该进程的1个线程)
  	-udp --user datagram protocol
  		-基于Internet ip协议 增加了：
  			-复用/分用
  			-简单的错误校验 防止链路网络层传输出错
  		-best errort服务,udp可能会
  			-丢失
  			-非按序到达
  		-无连接
  			-发送方与接收方不需要握手
  			-每个udp段处理独立于其他段
  		-udp为什么存在？
  			-1.不需要建立连接 -- 意味着延迟减少
  			-2.实现简单,无需维护连接的状态
  			-3.头部开销少
  			-4.没有拥塞控制,应用可以更好的控制发送时间与发送速率
  		-使用场景：
  			-流媒体应用
  				-容忍数据丢失
  				-速率敏感
  			-dns,snmp
  		-如何在udp上实现可靠的数据传输
  			-在应用层增加可靠性机制
  			-应用特定的错误恢复机制

  	14.可靠数据传输的原理
  		-rdt 可靠数据传输协议
  		-rdt_send() -> udt_send() <-> unreliable channel <-> rdt_rcv() -> deliver_data()
  			上层协议调用一次即可  下层协议会反复调用 直到可靠交付
  		-FSM利用状态机刻画传输协议

  		-rdt1.0
  			-发送方：因下方channel可靠就直接发送rdt_send
  			-接收方：因channel可靠直接接收等待调用

  		-rdt2.0 现在可能发生 -- 位错误
  			-接收方:效验和检测位错误
  			-同时有ack机制,告知发送方已正确接收
  			-发送方收到nak就重传分组
  			-重传机制的rdt为： ARQ(automatic repeat request)协议
  			-停-等协议
  				 fsm会处于：发送方wait for call from above <-> wait for ack or nak
  						    接收方wait for call from below

  		-rdt2.1
  			-基于2.0 如果ack或者nak出现错误,出现死锁
  				-解决方法：如果ack和nak出现错误-重传数据,但不能简单重传(出现两个相同的数据)
  			-产生重复分组：
  				-解决方法：为消息加上序列号,丢弃重复分组

  		-rdt2.2
  			-问题：有两个确认消息ack+nak
  				-解决方法：只要ack+序列号,发送方收到重复ack就重发

  		-rdt3.0 现在可能出现channel错误,也可能丢失分组
  			-方法：发送方等待合理时间
  				-如果没有收到ack重传
  				-如果ack延迟了 ,重复分组 ->已被序列号解决
  				-使用定时器
  		-目前实现：能正确工作,但是性能很差
  		-在rdt3.0的基础上采用流水线机制,提供资源利用率
  			-同时发送多个分组
  		-滑动窗口协议
  			-窗口：
  				-允许使用的序列号范围
  				-窗口尺寸为N,最多有N个等待确认的消息
  			-滑动：
  				随着协议的运行,窗口在序列号空间内向前滑动
  			-协议有：GBN,SR:
  				-GBN
  					-ack(n) 确认到序列号n的分组均被正确接收
  					-设置有timer timeout(n):重传序列号大于等于n,还没收到的ack所有分组
  					-接收机制：
  					-发送拥有最高序列号的被正确接收的ack
  					-乱序到达的分组直接丢弃,然后重新确认最大序列号分组
  				-SR
  					-比GBN多了接受方的窗口
  					-将接收到的标记
  					-等于发送/接受双窗口,但相互并不知道位置
  					-缺陷：
  						-当窗口尺寸较大,但是序列号少时,出现接收方接受成功,发送方没收到确认消息,重发序列号正好而又错误的数据
  						-解决方法：
  							发送方窗口+接收方窗口 <= 序列号数

  14.tcp协议
    -特点:
        点对点:一个接收 一个发送
		流水线机制：介于gbn,sr之间的机制
		可靠m,按序
		全双工full-duplex:同一链接可以传输双向数据流
	-tcp段结构
	    source port,dest port,sequence name,ack name...
	-序列号和ack
	    序列号是segment第一个字节的编号
	    序列号累计确认
        乱序到达的segment无处理
    -tcp实现的可靠数据
        -概述
            -流水线机制
            -累计确认
            -单一重传定时器
            -出发重传事件：超时，收到重复ack
        -合理设置定时器时间
            关键参数：RTT(round-trip time 往返时延)
            采样多个SampleRTT，求平均值,作为估计值EstimatedRTT
            devRTT = SampleRTT与EstimatedRTT的差值绝对值
            最终：TimeoutInterval = EstimatedRTT + 4devRTT
        -tcp中如果发生超时,会使超时间隔加长
        -通过重复ack检测分组丢失
            -sender收到receiver的3个相同ack就假定数据丢失，重发
            -快速重传,在定时器超时前发送
    -tcp流量控制
        -概念：为防止传输给receiver数据太快,以至于数据处理不过来
        -速度匹配机制
        -机制：
            rcvWindows里的spare room（buffer可用空间）
            接受方告诉发送方
            发送方限制自己发送数据
    -tcp连接管理
        -建立连接前：初始化一些tcp变量 3次handShark
            -当第二次握手时,客户端会开辟预工作空间
                -掌握这种方法,可进行攻击
        -关闭连接：客户端主动发送关闭请求
    -拥塞控制原理
        -概念：解决数据太多，网络无法处理的问题
        -表现：分数丢失,分组延迟过大
        -控制方法：
            -端到端(tcp使用)
                网络层不需要显示的提供支持
                端系统通过观察delay和loss网络行为判断是否拥塞
            -网络辅助
                路由器向发送方显式的反馈网络拥塞信息
                简单的拥塞指示,根据指示控制发送速率
                -ABR available bit rate
                    -弹性服务
                    -根据可用带 宽,调整传输速率
                    -发送拥塞-最低的保障速率
                -RM cells  resource management
                    -发送方发送
                    -交换机设置RM cell位
                        -NI rate不增长
                        -CI 拥塞指示
                    -由接收方返回给发送方
        -tcp拥塞控制机制：
            -限制发送速率
                rate = congWin/RTT
                congWin 动态调整改变发送速率,反映感知的网络拥塞
            -当timeout 或 3个重复ack 发送方降低速率
            -AIMD 慢增长-遇问题减半
                原理：谨慎探测可用带宽,逐渐增加发送速率,当发送loss速率减半
                additive increase multiplicative decrease
            -SS 慢启动
                原理：连接开始时数额小，指数性增长
            -Threshold 变量
                -当CongWing是Loss前1/2时,指数性增长切换为线性增长？
            -Loss事件处理：
                -非严重处理：遇到3个重复ack congWin 减半 调整为线性增长
                -严重处理：timeout事件 congWin设为1 调整为指数增长

  15.网络层服务
    -主机对主机的传输
    -核心功能：
        -转发：
            将分组从路由器的输入端口转移到合适的输出端口
            实现：路由器使用转发表,根据地址查询转发到的输出链路
        -路由：
            确定分组从源安东目的经过的路径
    -连接建立
        -数据分组传输之前两端主机需要首先建立虚拟/逻辑连接
        -网络层连接：两个主机之间的路径上的路由器都要保存连接的信息
    -无连接服务：
        -不事先为系统分组传输确定传输路径的服务：无连接服务
        -每个分组独立确定传输路径
        -不同分数传输路径可能不同
        -代表：数据报网络
    -数据报网络：
        -类似udp,无连接
        -目的地址：每个分组都保存有目的地址
        -路由选择：每个分组随机选择路由
        -无法保障顺序到达
        -端到端的差错处理由主机负责
        -端到端的流量控制由主机负责
    -连接服务：
        -建立连接：实现为系统分组的传输确定从原到目的经过的路径
        -通过该路径传输分组
        -代表：虚电路网络
    -虚电路网络
        -类型tcp,必须建立连接
        -目的地址：在建立连接时需要用到目的地址,然后输出数据只需要存虚电路号
        -路由选择：连接建立成功,所有分组用同一路由,一旦路由出问题就会崩溃
        -顺序到达
        -端到端的差错处理由通信子网负责
        -端到端的流量控制由通信子网负责
    -ip数据报
        -IP协议是不可靠的无连接数据报传输
        -字段及其功能：
            版本号：    4位  表示ip协议版本
            头长度：    4位  报头的长度
            服务类型：  8位   规定数据报处理方式
                优先权
                短延迟
                高吞吐
                高可靠
                保留位
            总长度：   16位  整个数据报的长度
            生存时间   8位   设定数据报在网络中传输的最长时间(实际设定的是数据报经过的最大路由数)
            上层协议   8位   ip协议可以将数据送到指定的上层协议
                -ICMP 1 网际控制报文协议
                -IGMP 2 网际组管理协议
                -GPP  3 网关-网关协议
                -ST   5 流
                -TCP  6 传输控制协议
                -EGP  8 外部网关协议
                -IGP  9 内部网关协议
                -NVP  11 网络声音协议
                -UDP  12 用户数据报协议
            校验和：   16位  用于校验协议头数据的正确与完整性
            源地址：   32位  发送方ip地址
            目地址：   32位  接收方ip地址
        数据报分片和重组
            最大传输单元:不同路由之间的链路与介质物理性能不一定相同，需要设定最大传达单元MTU
			分片：将一个数据报分成多个数据报- 每个数据报头信息相同,数据被分开,同时保存分片的片号
			    标识，标志，偏移量
			重组：根据收到的分片数据报进行整合成真实的数据报
    -ip编址：
        -IP地址使用32位二进制表示
	    前16位表示网络号 后16位表示主机号
	    ABC三类ip地址
	    A:0.0.0.0 - 127.255.255.255
	    B:128.0.0.0 - 191.255.255.255
	    C:192.0.0.0 - 223.255.255.255   X.X.X.0 网络地址 X.X.X.255 广播地址
	-子网划分和子网掩码
	    在原网络划分下再进行网络划分：netID + subID + hostID
	    -子网掩码
	        -根据点分十进制形式划分：netID+subID 默认为1 hostID为0  所以如C类网络 为255.255.255.0
	        -路由器根据子网地址与子网掩码来确定Ip分组转发到那个子网
        -私网地址
            -作为局域网之中使用
	        -A: 10.0.0.1 - 10.255.255.255
	        -B：172.16.0.1 - 172.31.255.255
	        -C：192.168.0.1 - 192.168.255.255
    -CIDR与路由聚合
        -作用：  消除传统A,B,C地址划分
                 融合子网地址与子网掩码,方便子网划分
                 提升ipv4地址分配
        -格式：a.b.c.d/x   其中x为前缀长度

  16.DHCP协议
    -动态主机配置协议dynamic host configuration protocol
    -从服务器获取动态的ip地址

  17.NAT
    -网络地址转换
    -将私有网络的数据通过转换发送出去
    -该网络内所有ip地址相同,不同主机端口不同
    -NAT转换表：WAN端地址 LAN端地址
    -限制:一般只支持6w个并行端口连接
          因为用了端口号,跨层用了传输层的功能
          NAT应该被ipv6取代
	-NAT穿透问题：
	    -因为nat的原因,外部无法直接连接内部网络
	    -解决方法：
	        1.静态配置nat转换表,将特定端口请求转发给服务器 - 过于固定
	        2.利用upnp互联网网关设备协议自动配置,类似于1 - 相较于他会自动增删端口映射
	        3.中继: 设定一个 中继的服务器 让NAT内客户与中继连接 外部客户通过中继服务器转发内部客户 桥接作用

  18.ICMP协议
    -互联网控制报文协议

	
	
	

	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	