  #中文文档: http://docs.kubernetes.org.cn/
  #Rancher中文文档: https://rancher.com/docs/rancher/v1.6/zh/
  1.kubernetes简介
	-特点：
		轻量级，消耗资源小
		开源
		弹性伸缩
		负载均衡
		
  2.kubernetes组件
	-must服务：
		scheduler	调度器			分配任务的
		apisever	服务器			操作访问的入口
		replication controller	控制器	负责根据需求增加删除pod容器副本
	-etcd：（持久化）
		键值对数据库---可信赖的分布式键值存储服务
		作用：为分布式集群存储关键数据,帮助分布式集群正常运转
	-node节点：
		pod			
		kubelet		创建容器,位置Pod生命周期
		kube-proxy	投影pod端口映射,同时负责负载均衡
		container	一个container == 一个docker
		
  3.pod
	-概念：k8s最小的逻辑单元
	-一个pod可以运行多个容器，(1pod多容器叫边车模式)
	-同一个pod里面的容器共享网络与存储卷，
	 如在里面直接localhost就能访问另外一个容器的端口
	 所以同pod不同容器端口不能相同	

  3.5 pod控制器
    -概念：用以pod启动的模板，同时保证pod的预期运行（副本数、生命周期、健康状态检查...等）
    -目的：控制pod
    -控制器管理：
    		-ReplicationController
    			控制副本数保持在用户定义的数量
    		-ReplicaSet
    			在ReplicationController基础上,支持集合式selector
    		-Deployment 无状态服务*最常用*
    			ReplicaSet的管理器，且多出一些功能（如：rolling-update）
            -StatefulSet 有状态服务（有数据存储的服务）
                稳定的持久化服务,即pod重新调度访问相同数据
                稳定的网络标志,pod名和host名不变
                有序部署,有序扩展,即根据顺序依次启动
                有序删除,有序收回
            -DaemonSet
                确保node上运行一个pod副本,
    		-Horizontal Pod Autosacling
    			仅使用于Deployment与ReplicaSet
    			弹性扩展,可以设置当cpu利用率到达一定数额时,增加容器来分担利用率
    			可以设置：最多容器数,最少容器数,cpu
    		-Job
    			负责批处理任务
    			执行脚本任务,保证pod成功结束,即脚本执行成功
    		-CronJob
    			有时间管理的Job
		
  4.kubernetes网络通讯方式
	-k8s假定pod在扁平化的网络空间中
		扁平网络空间：可以通过对方的ip直接达到。
		GCE(google compute enginee)的云服务已经实现了
		其他私有云搭建着：需要先构建扁平化的网络空间。
	-同一个pod的容器通讯：localhost
		即通过pause容器,localhost即可访问
	-不同pod之间通讯：Overlay Network(全覆盖网络)
		-在同一机器：
			有docket0网桥直接转发至pod2
		-不同机器：
			将pod的ip与node的ip关联起来,通过关联互相访问	
	-pod与service通讯：各节点的Iptables规则
		使用LVS
	-pod到外网通讯：
		查找路由表,转发数据包到宿主机网卡,宿主机完成路由选择,通过动态数据包,将源ip换成宿主机网卡ip,然后发送请求
	-外网访问Pod通讯：
		将Service通过nodepod进行映射然后访问
	-Flannel网络规划服务
		让集群的不同节点主机创建的在全集群ip地址唯一
	-Flanned远程端口访问方案
		跨主机的扁平化网络根据多次ip封装解析做到跨主机访问	
		etcd存储已分配的ip地址
		监控etcd每个pod实际地址,并维护pod节点路由表
		
  5.kubernetes安装部署	
	-centerOs 要安装7以上的
	-查看ip地址配置详情
		vi /etc/sysconfig/network-scripts/ifcfg-ens33
	-yum 安装k8s 看网上教程
	-升级系统内核到4.44
	-设置docker开机自启动	
		-systemctl start docker
		-systemctl enable docker
	-安装kubeadm
	
  6.kubernetes资源清单
	-分类：
		-名称空间级别：
			概念：只有在该名称下 才能被调用
			-工作负载型资源：
				
		-集群级别：
			概念：不管哪里都可以被调用
		-元数据型：
			概念：通过某项的指标进行扩展

  7.k8s概念知识：
    -k8s的组件：
        1 Master 组件
            1.1 kube-apiserver      对外接口
            1.2 ETCD                对集群数据进行的存储
            1.3 kube-controller-manager         控制器管理中心

            1.4 cloud-controller-manager
            1.5 kube-scheduler
            1.6 插件 addons
                1.6.1 DNS
                1.6.2 用户界面
                1.6.3 容器资源监测
                1.6.4 Cluster-level Logging
        2 节点（Node）组件
            2.1 kubelet
            2.2 kube-proxy
            2.3 docker
            2.4 RKT
            2.5 supervisord
            2.6 fluentd
    -k8s的对象：
        Kubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。
    -k8s 资源
        用于定义每种逻辑功能，每个资源有apiVersion,kind,metadata,spec定义清单,status等概念
    -k8s Name
        定义资源的名称
    -k8s Namespace
        命名空间,用于分隔不同集群（项目）
    -k8s Label
        标签，方便调度、访问、管理
    -k8s annotations
        注解 类似标签,不受字数限制
    -k8s Label选择器
        用于过滤标签,然后对筛选出的标签进行操作
    -k8s Volume
        将文件持久化 有很多方案
    -k8s service
        用于提供相同服务Pod的对外访问接口
        一个service可用于那些pod由label选择器决定
        提供第L4层流量调度,ip+port
    -k8s Ingress
        主要用于提供对外暴露接口的pod
        OSI的第L7层
        可以调度不同业务域，不同Url访问路径的业务流量

  8.k8s 网络流量调度
    -Namespace 废弃
    -Iptables 快废弃
    -ipvs 虚拟网络

  9.k8s安装
    -视频链接: https://www.bilibili.com/video/BV1nr4y1T7Bf?p=35&spm_id_from=pageDriver
    -笔记文档: https://www.yuque.com/grep/kubernetes/cdiy10#ChFxb
    -9.1 部署前准备
        -1 安装bind9 DNS服务器,控制host下所有主机
        -2 准备签发证书环境
            -安装CFSSL 或者 openSSL
            -创建生成CA证书
            -/opt/certs
        -3 部署docker环境
        -4 部署harbor镜像仓库
        -5 部署nginx
    -9.2 MASTER节点部署
        -1 部署ETCD
            -生成了CA证书的服务器上建立证书请求文件 etcd-peer-csr.json
            -生成证书和私钥:
                cfssl gentcert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-peer-csr.json | cfssl-json -bare etcd-peer
            -下载etcd
            -配置etcd启动脚本 在里面配置证书/私钥
            -install supervisord 下载进程守护软件，守护并启动etcd
                -在/etcd/supervisord.d/etcd.ini创建supervisord启动ETCD的文件
            -重复: 上述步骤 部署奇数个ETCD集群,注意ETCD启动shell的监听端口要改
            -检测: 任一节点 ./etcdctl cluster-health 检查集群是否正确部署
        -2 部署apiserver
            -官网下载 k8s 所有服务
            -类似ETCD一样签发 etcd对apiserver的client证书,与其他服务请求apiserver的server证书
            -创建k8s资源配置清单,做日志审计用 一般叫: audit.yaml
            -创建apiserver启动sh脚本
            -同用supervisord创建进程启动守护ini,并启动起来
                supervisorctl update 启动
                supervisorctl status 查看状态
        -3 部署L4反向代理
            -安装nignx
                -配置stream代理选择的几台主机为反代
            -安装keepalived(vip) 主从vip 做浮动ip
        -4 部署kube-controller-manager
            -启动sh脚本+supervisord
            -连本机apiserver不用证书
        -5 部署kube-scheduler
            -启动sh脚本+supervisord
            -连本机apiserver不用证书
    -9.3 NODE节点部署
        -1 kubelet部署
            -
        -2 kube-proxy部署
            -

  10.k8s命令
    -检查集群健康
        kubectl get cs
    -

 -------------------------------------------华为云容器CCE------------------------------------------------------------------
 1.概念
    -名词
        集群：     是指容器运行所需云资源的集合，包含了若干台云服务器、负载均衡器等云资源。
        实例（Pod）：    由相关的一个或多个容器构成一个实例，这些容器共享相同的存储和网络空间。
        工作负载：   Kubernetes资源对象，用于管理Pod副本的创建、调度以及整个生命周期的自动控制。
        Service：    由多个相同配置的实例（Pod）和访问这些实例（Pod）的规则组成的微服务。
        Ingress：    Ingress是用于将外部 HTTP（S）流量路由到服务（Service）的规则集合。
        Helm 应用：    Helm 是管理Kubernetes应用程序的打包工具，提供了Helm Chart在指定集群内图形化的增删改查。
        镜像仓库：   用于存放Docker镜像，Docker镜像用于部署容器服务。
        节点:        一台服务器设备(虚拟机/物理机)
    -工作负载:
        -无状态工作负载：
            即kubernetes中的“Deployments”，无状态工作负载支持弹性伸缩与滚动升级，适用于实例完全独立、功能相同的场景，如：nginx,wordpress,功能独立的微服务 等。
        -有状态工作负载:
            即kubernetes中的“StatefulSets”，有状态工作负载支持实例有序部署和删除，支持持久化存储，适用于实例间存在互访的场景，如ETCD等
		-守护进程集:
		    确保全部（或者某些）节点上仅运行一个Pod实例，当有节点加入集群时，也会为他们新增一个 Pod
		    当有节点从集群移除时，这些 Pod 也会被回收
		    删除 DaemonSet 将会删除它创建的所有 Pod
		
		
 ----------------------------------------------------rancher-------------------------------------------------------------
    中文文档地址：https://docs.rancher.cn/docs/rancher2/overview/_index/
    本地启动：
        docker run -d -p 8080:80 -p 8443:443 --privileged \
         --restart=unless-stopped \
         -v /home/z1/program/rancher_data:/var/lib/rancher \
         rancher/rancher:v2.4-head

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		