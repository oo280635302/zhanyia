  #中文文档: http://docs.kubernetes.org.cn/
  #Rancher中文文档: https://rancher.com/docs/rancher/v1.6/zh/
  1.kubernetes简介
	-特点：
		轻量级，消耗资源小
		开源
		弹性伸缩
		负载均衡

  2.kubernetes组件
	-must服务：
		scheduler	调度器			分配任务的
		apiserver	服务器			操作访问的入口
		replication controller	控制器	负责根据需求增加删除pod容器副本
	-etcd：（持久化）
		键值对数据库---可信赖的分布式键值存储服务
		作用：为分布式集群存储关键数据,帮助分布式集群正常运转
	-node节点：
		pod			
		kubelet		创建容器,位置Pod生命周期
		kube-proxy	投影pod端口映射,同时负责负载均衡
		container	一个container == 一个docker
		
  3.pod
	-概念：k8s最小的逻辑单元
	-一个pod可以运行多个容器，(1pod多容器叫边车模式)
	-同一个pod里面的容器共享网络与存储卷，
	 如在里面直接localhost就能访问另外一个容器的端口
	 所以同pod不同容器端口不能相同	

  3.5 pod控制器
    -概念：用以pod启动的模板，同时保证pod的预期运行（副本数、生命周期、健康状态检查...等）
    -目的：控制pod
    -控制器管理：
            -ReplicationController
                控制副本数保持在用户定义的数量
            -ReplicaSet
                在ReplicationController基础上,支持集合式selector
            -Deployment 无状态服务*最常用*
                ReplicaSet的管理器，且多出一些功能（如：rolling-update）
            -StatefulSet 有状态服务（有数据存储的服务）
                稳定的持久化服务,即pod重新调度访问相同数据
                稳定的网络标志,pod名和host名不变
                有序部署,有序扩展,即根据顺序依次启动
                有序删除,有序收回
            -DaemonSet
                确保node上运行一个pod副本,
            -Horizontal Pod Autosacling
                仅使用于Deployment与ReplicaSet
                弹性扩展,可以设置当cpu利用率到达一定数额时,增加容器来分担利用率
                可以设置：最多容器数,最少容器数,cpu
            -Job
                负责批处理任务
                执行脚本任务,保证pod成功结束,即脚本执行成功
            -CronJob
                有时间管理的Job
		
  4.kubernetes网络通讯方式
	-k8s假定pod在扁平化的网络空间中
		扁平网络空间：可以通过对方的ip直接达到。
		GCE(google compute enginee)的云服务已经实现了
		其他私有云搭建着：需要先构建扁平化的网络空间。
	-同一个pod的容器通讯：localhost
		即通过pause容器,localhost即可访问
	-不同pod之间通讯：Overlay Network(全覆盖网络)
		-在同一机器：
			有docket0网桥直接转发至pod2
		-不同机器：
			将pod的ip与node的ip关联起来,通过关联互相访问	
	-pod与service通讯：各节点的Iptables规则
		使用LVS
	-pod到外网通讯：
		查找路由表,转发数据包到宿主机网卡,宿主机完成路由选择,通过动态数据包,将源ip换成宿主机网卡ip,然后发送请求
	-外网访问Pod通讯：
		将Service通过nodepod进行映射然后访问
	-Flannel网络规划服务
		让集群的不同节点主机创建的在全集群ip地址唯一
	-Flannel远程端口访问方案
		跨主机的扁平化网络根据多次ip封装解析做到跨主机访问	
		etcd存储已分配的ip地址
		监控etcd每个pod实际地址,并维护pod节点路由表
		
  5.kubernetes安装部署	
	-centerOs 要安装7以上的
	-查看ip地址配置详情
		vi /etc/sysconfig/network-scripts/ifcfg-ens33
	-yum 安装k8s 看网上教程
	-升级系统内核到4.44
	-设置docker开机自启动	
		-systemctl start docker
		-systemctl enable docker
	-安装kubeadm
	
  6.kubernetes资源清单
	-分类：
		-名称空间级别：
			概念：只有在该名称下 才能被调用
			-工作负载型资源：
		-集群级别：
			概念：不管哪里都可以被调用
		-元数据型：
			概念：通过某项的指标进行扩展

  7.k8s概念知识：
    -k8s的组件：
        1 Master 组件
            1.1 kube-apiserver      对外接口
            1.2 ETCD                对集群数据进行的存储
            1.3 kube-controller-manager         控制器管理中心
            1.4 cloud-controller-manager
            1.5 kube-scheduler
            1.6 插件 addons
                1.6.1 DNS
                1.6.2 用户界面
                1.6.3 容器资源监测
                1.6.4 Cluster-level Logging
        2 节点（Node）组件
            2.1 kubelet
            2.2 kube-proxy
            2.3 docker
            2.4 RKT
            2.5 supervisord
            2.6 fluentd
    -k8s的对象：
        Kubernetes对象是Kubernetes系统中的持久实体。Kubernetes使用这些实体来表示集群的状态。
    -k8s 资源
        用于定义每种逻辑功能，每个资源有apiVersion,kind,metadata,spec定义清单,status等概念
    -k8s Name
        定义资源的名称
    -k8s Namespace
        命名空间,用于分隔不同集群（项目）
        命令:
            kubectl create namespace xxx
        YAML:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: new-namespace
    -k8s Label
        标签，方便调度、访问、管理
    -k8s annotations
        注解 类似标签,不受字数限制
    -k8s Label选择器
        用于过滤标签,然后对筛选出的标签进行操作
    -k8s Volume
        将文件持久化 有很多方案
    -k8s service
        用于提供相同服务Pod的对外访问接口
        一个service可用于那些pod由label选择器决定
        提供第L4层流量调度,ip+port
    -k8s Ingress
        主要用于提供对外暴露接口的pod
        OSI的第L7层
        可以调度不同业务域，不同Url访问路径的业务流量

  8.k8s 网络流量调度
    -Namespace 废弃
    -Iptables 快废弃
    -ipvs 虚拟网络

  9.k8s安装
    -视频链接: https://www.bilibili.com/video/BV1nr4y1T7Bf?p=35&spm_id_from=pageDriver
    -笔记文档: https://www.yuque.com/grep/kubernetes/cdiy10#ChFxb
    -9.1 部署前准备
        -1 安装bind9 DNS服务器,控制host下所有主机
        -2 准备签发证书环境
            -安装CFSSL 或者 openSSL
            -创建生成CA证书
            -/opt/certs
        -3 部署docker环境
        -4 部署harbor镜像仓库
        -5 部署nginx
    -9.2 MASTER节点部署
        -1 部署ETCD
            -生成了CA证书的服务器上建立证书请求文件 etcd-peer-csr.json
            -生成证书和私钥:
                cfssl gentcert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-peer-csr.json | cfssl-json -bare etcd-peer
            -下载etcd
            -配置etcd启动脚本 在里面配置证书/私钥
            -install supervisord 下载进程守护软件，守护并启动etcd
                -在/etcd/supervisord.d/etcd.ini创建supervisord启动ETCD的文件
            -重复: 上述步骤 部署奇数个ETCD集群,注意ETCD启动shell的监听端口要改
            -检测: 任一节点 ./etcdctl cluster-health 检查集群是否正确部署
        -2 部署apiserver
            -官网下载 k8s 所有服务
            -类似ETCD一样签发 etcd对apiserver的client证书,与其他服务请求apiserver的server证书
            -创建k8s资源配置清单,做日志审计用 一般叫: audit.yaml
            -创建apiserver启动sh脚本
            -同用supervisord创建进程启动守护ini,并启动起来
                supervisorctl update 启动
                supervisorctl status 查看状态
        -3 部署L4反向代理
            -安装nignx
                -配置stream代理选择的几台主机为反代
            -安装keepalived(vip) 主从vip 做浮动ip
                -目的：下游kubelet服务通信,能不因为apiserver一台结点故障就无法访问
        -4 部署kube-controller-manager
            -启动sh脚本+supervisord
            -连本机apiserver不用证书
        -5 部署kube-scheduler
            -启动sh脚本+supervisord
            -连本机apiserver不用证书
    -9.3 NODE节点部署
        -1 kubelet部署
            -创建kubelet证书
            -用kubectl创建配置文件
                kubectl config xxx xxx
                -set-cluster
                -set-credentials
                -set-context
                -use-context
            -编写k8s-node.yaml
            -签发证书,并创建k8s-node配置
            -授权 k8s-node 用户绑定集群角色 system:node ，让 k8s-node 成为具备运算节点的权限
                -vim k8s-node.yaml
                     apiVersion: rbac.authorization.k8s.io/v1
                     kind: ClusterRoleBinding
                     metadata:
                       name: k8s-node
                     roleRef:
                       apiGroup: rbac.authorization.k8s.io
                       kind: ClusterRole
                       name: system:node
                     subjects:
                     - apiGroup: rbac.authorization.k8s.io
                       kind: User
                       name: k8s-node
                -kubectl create -f k8s-node.yaml
                -kubectl get clusterrolebinding k8s-node
            -准备pause基础镜像
                -目的：初始化网络空间、ipc空间、uts空间
            -创建kubelet启动脚本,同时创建进程守护进程
        -2 kube-proxy部署
            -proxy目的：管理/维护pod网络和集群网络和节点网络
            -签发证书,创建k8s-proxy配置
            -加载ipvs模块
                #!/bin/bash
                for i in $(ls /usr/lib/modules/$(uname -r)/kernel/net/netfilter/ipvs|grep -o "^[^.]*");do echo $i; /sbin/modinfo -F filename $i >/dev/null 2>&1 && /sbin/modprobe $i;done
            -创建k8s启动脚本,同时创建进程守护进程
  10.kubectl命令
    -命令大全：
        http://docs.kubernetes.org.cn/683.html
    -查询
        Usage:  kubectl get resource [-o wide|json|yaml] [-n namespace]
        Man:    获取资源的相关信息，-n 指定名称空间，-o 指定输出格式
                resource可以是具体资源名称，如pod nginx-xxx；也可以是资源类型，如pod；或者all(仅展示几种核心资源，并不完整)
                -A, --all-namespace 表示显示所有名称空间
        -检查集群健康
            kubectl get cs
        -查看名称空间
            kubectl get namespaces
    -描述
        Usage: kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME) [-n namespace]
        Man:   描述某个资源信息
        -eg:
            kubectl describe svc nginx-web
    -创建
        Uage:   kubectl create -f filename.yaml
                kubectl create resourece [options]
        Man:    根据清单文件或者指定的资源参数创建资源
        -创建名称空间
            kubectl create namespace app
        -创建deployment
            kubectl create deployment app-deploy --image=ubuntu:latest -n app
    -创建service资源
        Usage: Usage:  kubectl expose TYPE NAME [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=n] [--name=name] [--external-ip=external-ip-of-service] [options]
        Man:    TYPE为deployment,NAME为depoly资源名称，port和target-port分别为集群和pod的端口
        -eg:
            kubectl expose deployment app-deploy --port=80 --target-port=80 --name=app-svc -n app
    -扩展
        Usage:  kubectl scale --replicas=COUNT TYPE NAME [options]
        Man:    对资源进行扩缩容，即修改副本数
        -eg:
            kubectl scale --replicas=5 deployment xxx
    -删除
        Usage:  kubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)]) [options]
        Man:    删除指定资源
        -删除名称空间
            kubectl delete namespace app
        -删除服务
            kubectl delete deploy ${projectname} -n ${ENV}
    -重置某服务的某容器镜像地址：
        kubectl set image deployment/${projectname} ${projectname}=${image} -n ${ENV}
    -配置
        kubectl config SUBCOMMAND
        选项
              --kubeconfig="": 使用特定的配置文件。
        继承自父命令的选项
              --alsologtostderr[=false]: 同时输出日志到标准错误控制台和文件。
              --api-version="": 和服务端交互使用的API版本。
              --certificate-authority="": 用以进行认证授权的.cert文件路径。
              --client-certificate="": TLS使用的客户端证书路径。
              --client-key="": TLS使用的客户端密钥路径。
              --cluster="": 指定使用的kubeconfig配置文件中的集群名。
              --context="": 指定使用的kubeconfig配置文件中的环境名。
              --insecure-skip-tls-verify[=false]: 如果为true，将不会检查服务器凭证的有效性，这会导致你的HTTPS链接变得不安全。
              --kubeconfig="": 命令行请求使用的配置文件路径。
              --log-backtrace-at=:0: 当日志长度超过定义的行数时，忽略堆栈信息。
              --log-dir="": 如果不为空，将日志文件写入此目录。
              --log-flush-frequency=5s: 刷新日志的最大时间间隔。
              --logtostderr[=true]: 输出日志到标准错误控制台，不输出到文件。
              --match-server-version[=false]: 要求服务端和客户端版本匹配。
              --namespace="": 如果不为空，命令将使用此namespace。
              --password="": API Server进行简单认证使用的密码。
              -s, --server="": Kubernetes API Server的地址和端口号。
              --stderrthreshold=2: 高于此级别的日志将被输出到错误控制台。
              --token="": 认证到API Server使用的令牌。
              --user="": 指定使用的kubeconfig配置文件中的用户名。
              --username="": API Server进行简单认证使用的用户名。
              --v=0: 指定输出日志的级别。
              --vmodule=: 指定输出日志的模块，格式如下：pattern=N，使用逗号分隔。

    -yaml配置文件详解大全
        # yaml格式的pod定义文件完整内容：

        apiVersion: v1 　　#必选，版本号，例如v1
        kind: Pod 　　　　　　#必选，Pod
        metadata: 　　　　　　#必选，元数据
            name: string 　　#必选，Pod名称
            namespace: string 　　#必选，Pod所属的命名空间
            labels: 　　　　　　#自定义标签
            - name: string 　#自定义标签名字
            annotations: 　　#自定义注释列表
            - name: string
        spec: 　　　　　　　#必选，Pod中容器的详细定义
            containers: 　　　　#必选，Pod中容器列表
            - name: string 　　#必选，容器名称
            image: string 　　#必选，容器的镜像名称
            imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像
            command: [string] 　　#容器的启动命令列表，如不指定，使用打包时使用的启动命令
            args: [string] 　　 #容器的启动命令参数列表
            workingDir: string #容器的工作目录
            volumeMounts: 　　　　#挂载到容器内部的存储卷配置
            - name: string 　　　#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名
            mountPath: string #存储卷在容器内mount的绝对路径，应少于512字符
            readOnly: boolean #是否为只读模式
            ports: 　　　　　　#需要暴露的端口库号列表
            - name: string 　　　#端口号名称
            containerPort: int #容器需要监听的端口号
            hostPort: int 　　 #容器所在主机需要监听的端口号，默认与Container相同
            protocol: string #端口协议，支持TCP和UDP，默认TCP
            env: 　　　　　　#容器运行前需设置的环境变量列表
            - name: string 　　#环境变量名称
            value: string 　　#环境变量的值
            resources: 　　#资源限制和请求的设置
            limits: 　　　　#资源限制的设置
            cpu: string 　　#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数
            memory: string #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数
            requests: 　　#资源请求的设置
            cpu: string 　　#Cpu请求，容器启动的初始可用数量
            memory: string #内存清楚，容器启动的初始可用数量
            livenessProbe: 　　#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可
            exec: 　　　　　　#对Pod容器内检查方式设置为exec方式
            command: [string] #exec方式需要制定的命令或脚本
            httpGet: 　　　　#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port
            path: string
            port: number
            host: string
            scheme: string
            HttpHeaders:
            - name: string
            value: string
            tcpSocket: 　　　　　　#对Pod内个容器健康检查方式设置为tcpSocket方式
            port: number
            initialDelaySeconds: 0 #容器启动完成后首次探测的时间，单位为秒
            timeoutSeconds: 0 　　#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒
            periodSeconds: 0 　　#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次
            successThreshold: 0
            failureThreshold: 0
            securityContext:
            privileged: false
            restartPolicy: [Always | Never | OnFailure] #Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod
            nodeSelector: obeject 　　#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定
            imagePullSecrets: 　　　　#Pull镜像时使用的secret名称，以key：secretkey格式指定
            - name: string
            hostNetwork: false 　　#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络
            volumes: 　　　　　　#在该pod上定义共享存储卷列表
            - name: string 　　 　　#共享存储卷名称 (volumes类型有很多种)
            emptyDir: {} 　　　　#类型为emptyDir的存储卷，与Pod同生命周期的一个临时目录。为空值
            hostPath: string 　　#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录
            path: string 　　#Pod所在宿主机的目录，将被用于同期中mount的目录
            secret: 　　　　　　#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部
            scretname: string
            items:
            - key: string
            path: string
            configMap: 　　　　#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部
            name: string
            items:
            - key: string
            path: string

  11.Ingress
    -公开了从集群外部到集群内服务的 HTTP 和 HTTPS 路由，根据Ingress规则进行转发到Services
    -分为：Ingress controller 和 Ingress 服务
    -Ingress controller控制器
        -目前有： AWS， GCE 和 nginx Ingress
        -用于Ingress服务规则的执行，实际工作者
    -Ingress 服务
        -制定Ingress规则，k8s资源的一种
        -eg:
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: minimal-ingress
              annotations:
                nginx.ingress.kubernetes.io/rewrite-target: /
            spec:
              defaultBackend:
                serviceName: xxx
                servicePort: 80
              rules:
              - host: errand.kuaixg.cn
                http:
                  paths:
                  - path: /
                    pathType:Prefix
                    backend:
                      serviceName: errand
                      servicePort: 80
            -注意：ingress一般使用annotations注解配置选项
    -Ingress规则
        -host
            未指定host将会允许所有请求流入backend
            指定host(www.baidu.com)只能该域名流入的才能进入backend
        -path
            指定匹配的path才能流入指定的backend
            pathType指路径规则
                -Exact 精确匹配
                -Prefix 前缀匹配
            eg: path:/xx  需要www.baidu.com/xx 才能进入指定backend
    -Resource资源后端
        指向同一名字空间中的另一个K8s中的资源
        -eg:
            resource:
              apiGroup: k8s.example.com
              kind: StorageBucket
              name: static-assets

  12.

 -------------------------------------------华为云容器CCE------------------------------------------------------------------
 1.概念
    -名词
        集群：     是指容器运行所需云资源的集合，包含了若干台云服务器、负载均衡器等云资源。
        实例（Pod）：    由相关的一个或多个容器构成一个实例，这些容器共享相同的存储和网络空间。
        工作负载：   Kubernetes资源对象，用于管理Pod副本的创建、调度以及整个生命周期的自动控制。
        Service：    由多个相同配置的实例（Pod）和访问这些实例（Pod）的规则组成的微服务。
        Ingress：    Ingress是用于将外部 HTTP（S）流量路由到服务（Service）的规则集合。
        Helm 应用：    Helm 是管理Kubernetes应用程序的打包工具，提供了Helm Chart在指定集群内图形化的增删改查。
        镜像仓库：   用于存放Docker镜像，Docker镜像用于部署容器服务。
        节点:        一台服务器设备(虚拟机/物理机)
    -工作负载:
        -无状态工作负载：
            即kubernetes中的“Deployments”，无状态工作负载支持弹性伸缩与滚动升级，适用于实例完全独立、功能相同的场景，如：nginx,wordpress,功能独立的微服务 等。
        -有状态工作负载:
            即kubernetes中的“StatefulSets”，有状态工作负载支持实例有序部署和删除，支持持久化存储，适用于实例间存在互访的场景，如ETCD等
		-守护进程集:
		    确保全部（或者某些）节点上仅运行一个Pod实例，当有节点加入集群时，也会为他们新增一个 Pod
		    当有节点从集群移除时，这些 Pod 也会被回收
		    删除 DaemonSet 将会删除它创建的所有 Pod
		
		
 ----------------------------------------------------rancher-------------------------------------------------------------
    中文文档地址：https://docs.rancher.cn/docs/rancher2/overview/_index/
    本地启动：
        docker run -d -p 8080:80 -p 8443:443 --privileged \
         --restart=unless-stopped \
         -v /home/z1/program/rancher_data:/var/lib/rancher \
         rancher/rancher:v2.4-head

 ----------------------------------------------------istio-------------------------------------------------------------------
    istio：服务网格的实现
    -作用：在k8s服务发现不满足服务通信的需求时再引入
    -基本功能特性：
        -流量管理  简化调度过程
            -负载均衡
            -动态路由
            -灰度发布
            -故障注入
        -安全  保证网络通信的安全
            -认证
            -鉴权
        -可观察  有监控
            -调用链
            -访问日志
            -监控
        -策略执行
            -限流
            -ACL
    -扩展
        -集成
            -ACL
            -日志
            -配额
        -平台支持
            -k8s
            -cloudFoundry
            -consul
            -Eureka
    -流量管理：
        -简介
            -依赖于自带的envoy代理
                    -自动检测集群中的服务与endpoint
                    -envoy默认使用轮询转发到负载均衡池
                        -更多调度策略+特殊规则 通过API添加配置到istio进行管理
    -安装和卸载
        -文档地址：
            https://istio.io/latest/zh/docs/setup/platform-setup/
        -下载
            curl -L https://istio.io/downloadistio | ISTIO_VERSION=x.x.x sh -
            or
            wget https://github.com/istio/istio/releases/download/x.x.x/istio-x.x.x-linux.tar.gz
        -设置环境变量
            export PATH=$PATH:/root/istio/istio-x.x.x/bin
        **需要在k8s能访问API server的节点上执行，否则无效
        -验证istioctl安装成功与否
            isitoctl version
        -安装istio
            istioctl mainfest apply --set profile=demo
        -查看可安装的istio版本
            istioctl profile list
    -流量控制：
        -配置请求路由
            kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml
            yaml:
                - apiVersion: networking.istio.io/v1beta1
                  kind: VirtualService
                  ...
                  spec:
                    hosts:
                    - details
                    http:
                    - route:
                      - destination:
                          host: details
                          subset: v1
    -核心组件：
        -envoy
            -代理，以字面意思理解即可，服务的网络代理，管理流量出入，类似于k8s的work-node。
            -特性：动态服务发现、负责均衡、TLS终端、http/grpc代理、熔断器、健康检查、基于百分比流量分割的分阶段发布、故障注入、丰富指标
        -istiod
            -中心，提供整体的服务发现、证书管理


		
		
		
		
		
		
		