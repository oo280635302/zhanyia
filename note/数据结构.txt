

  1.取模---队列---判断队列是否满
	(tail+1)%maxsize = head
	-上列总结是：两种情况的合：
		1) tail在head 后面的情况队列满---> tail-head+1 = maxsize
			-这个一种情况tail在数组最后,head在数组最前 
			-总结下来 (tail + 1)%maxsize = 0 ,正好head= 0 
			-满足了 tail+1 == maxsize的情况
		2) tail在head 前面的情况队列满---> tail-head+1 = 0
			-tail+1 = head
			-可以吧环形数组看成maxsize个数,循环+1 的队列
			-tail + 1  % maxsize 中tail + 1始终<maxsize
			-tail+1%maxsize = tail +1
			-tail+1%maxsize = head  
			-满足了tail+1 !=maxsiez的情况
		-本身maxsize就!=0,不用考虑%0的情况
		-所以 (tail+1)%maxsize = head满足 用来判断队列 满

  2.数据结构使用手册
	网址：www.cs.usfca.edu/~galles/visualization
  
  	
  3.Redis设计到的库
	-栈stack
		概念：先进后出 
		LPUSH+LPOP
	-队列queue
		概念：先进先出
		LPUSH+RPOP
	-阻塞队列blocking mq
		概念：先进先出,如果没有数据出去,等待到有数据再出去,
		LPUSH+BRPOP
		
-------------------------------------------------数据结构-------------------------------------------------	

	-介绍：
		数据结构是研究算法的学科
		程序=数据结构+算法+业务逻辑
		
	1.稀疏数组sparsearray:
		-使用场景：当一个数组大部分值都相同,保存其不同的数的数组
		-处理方法：
			-记录数组有几行几列,有多少个不同的值
			-把不同的值得行列记在另个数组中,从而缩小程序的规模
		-方法：
			数组：索引0 总行row 总列col 默认值value
				  索引1 行row 	列col 	值value
				  索引2 行row 	列col 	值value
				  索引3 行row 	列col 	值value
		-本质：
			将多余的相同数设置保存,把少余的数组位置记录下来,压缩数组
		-实例1：
			func main() {
				//原始数组
				var sparseMap [11][11]int
				sparseMap[1][2] = 1
				sparseMap[2][3] = 1
				//转成稀疏数组
				var sparseArr []node
				valNode := node{
					row: 11,
					col: 11,
					val: 0,
				}
				sparseArr = append(sparseArr,valNode)
				for i,v := range sparseMap{
					for j,v1 :=range v{
						if v1 != 0{
							valNode := node{
								row: i,
								col: j,
								val: v1,
							}
							sparseArr = append(sparseArr,valNode)
						}
					}
				}
				fmt.Println(sparseArr)
			}
			type node struct {
				row int
				col int
				val int
			}
		-将稀疏数组转换成原始数组
		-由于golang,数组长度是const,因此需要建立数组来接受
		-实例2：
			//将Sparse数组--->原始数组
			var unSparseMap [11][11]int
			for i,j := range unJsonSparse{
				if i == 0 {
					for x :=0 ; x < j.Row ;x++{
						for y :=0 ; y < j.Col ;y++{
							unSparseMap[x][y] = j.Val + 10
						}
					}
				}else {
					unSparseMap[j.Row][j.Col] = j.Val
				}
			}
			fmt.Println(unSparseMap)
			
	2.队列queue
		-队列的介绍：
			队列是一个有序的列表，可以用数组或者是链表来实现。
			遵循先入先出的原则。
		-数组模拟队列:(资源耗尽，不能循环使用)
			-队列本身是有序列表，若使用数组的结构来存储队列的数据，则该队友有最大容量
			-两个变量来标记队列前后端,front随数据输出改变,rear随数据输入改变
			-数据存入队列addqueue：
				1) 尾针传入数据往后移：rear+1
				2) rear  == maxsize -1 队列满(无法存入数据)
			-初始front,rear = -1
			-实例：
				type Queue struct {
					Maxsize int
					Arr		[4]int
					front  	int
					rear  	int
				}
				//添加数组
				func (this *Queue)AddQueue(val int)(err error) {
					if this.rear == this.Maxsize - 1{
						return errors.New("queue full！")
					}
					this.rear++
					this.Arr[this.rear] = val
					return
				}
				//显示队列
				func (this *Queue)ShowQueue(){
					for i:= this.front+1 ; i<= this.rear;i++{
						fmt.Printf("array[%d]=%d\t",i,this.Arr[i])
					}
					fmt.Println()
				}
				//取出数据
				func (this *Queue)GetQueue()(val int,err error) {
					if this.front == this.rear{
						err = errors.New("queue empty！")
						val = -1
						return
					}
					this.front ++
					val = this.Arr[this.front]
					return
				}
				func main() {
					 newQueue := Queue{
						 Maxsize: 4,
						 Arr:     [4]int{},
						 front:   -1,
						 rear:    -1,
					 }
					for i:= 1;i<5;i++{
						err := newQueue.AddQueue(100*i)
						if err!=nil{
							fmt.Println(err)
							return
						}
						newQueue.ShowQueue()
					}
					v,_ := newQueue.GetQueue()
					fmt.Println(v)
				}
		-环形队列（自制）：(单个队列循环使用)
			func (this *Queue1)add(val int)(err error){
				if this.rear == this.Maxsize  && this.Arr[0]== 0{
					this.rear = 0
				}else if this.rear == this.Maxsize  &&  this.Arr[0] != 0{
					return errors.New("队列Full")
				}//判断rear是否可以环
				this.Arr[this.rear]=val
				this.rear++
				return
			}
			func (this *Queue1)show(){
				fmt.Println(this.Arr)
			}
			func (this *Queue1)get()(val int,err error){
				if (this.front== this.rear && this.rear == 4) || this.front== this.rear{
					err = errors.New("队列空了")
					return
				}//判断front是否可以环
				if this.front == this.Maxsize{
					this.front = 0
				}
				val = this.Arr[this.front]
				this.Arr[this.front] = 0
				this.front++
				return
			}			
		-环形队列(取模)：(单个队列循环使用)
			-思路：
				1) 什么时候队列满: (tail+1)%maxsize = head 
				2) tail == head 表示空
				3) 初始化, tail = 0 ,head =0 
				4) 统计该队列中有几个元素: (tail+maxsize- head)%maxsize
			-实例：
				type Queue struct {
					Maxsize int
					Arr		[4]int
					front  	int
					rear  	int
				}
				//添加数组
				func (this *Queue)AddQueue(val int)(err error) {
					if this.IsFull() {
						return errors.New("队列满了")
					}
					this.Arr[this.rear] = val
					this.rear = (this.rear+1)%this.Maxsize
					return
				}

				//显示队列
				func (this *Queue)ShowQueue(){
					size := this.Size()
					if size == 0{
						fmt.Println("队列为空")
						return
					}
					front := this.front//一定要创个新的，不用动this.front本身
					for i:=0 ; i<size;i++{
						fmt.Printf("Array[%d]=[%d]\t",front,this.Arr[front])
						//打印的值
						front = (front+1 )%this.Maxsize
					}
					fmt.Println()
				}

				//取出数据
				func (this *Queue)GetQueue()(val int,err error) {
					if this.IsEmpty(){
						err = errors.New("队列为空")
						return
					}
					val = this.Arr[this.front]
					this.front ++
					return
				}

				//判断队列是否满了
				func(this *Queue) IsFull()bool{
					fmt.Println(this.rear)
					return (this.rear +1 ) % this.Maxsize == this.front
				}
				//判断队列是否为空
				func (this *Queue)IsEmpty() bool {
					return this.front == this.rear
				}
				//判断队列里面有多少元素
				func (this *Queue)Size() int {
					return (this.rear+this.Maxsize-this.front)%this.Maxsize
				}

				func main() {
					a := Queue{
						Maxsize:4,
						front:0,
						rear:0,
						}
					a.AddQueue(10)
					a.AddQueue(20)
					a.AddQueue(30)
					a.AddQueue(40)
					a.GetQueue()
					a.AddQueue(50)
					a.GetQueue()
					a.AddQueue(50)
					a.ShowQueue()
				}
	 
	3.链表link
		-概念：链表是一个有序的列表,单列表类似于结构体,存放数据,同时保存下个节点的地址
		-单链表：
			-概念：单个节点里面有个链指向下一个节点
			-一般情况:都有个头结点,用来表示链表头,本身不存放数据
			-实例1(基础案例)：
				type HeroNode struct {
					id int
					name string
					next *HeroNode
				}
				func main()  {
					var hero = &HeroNode{}
					var hero1 = &HeroNode{id:   1, name: "宋江",}
					var hero2 = &HeroNode{id:   2, name: "张飞",}
					InsertHeroNode(hero,hero1)
					InsertHeroNode(hero,hero2)
					ShowHeroNode(hero)
					
				}
				//插入链表
				func InsertHeroNode(head *HeroNode, newhero *HeroNode) {
					temp := head
					for{
						if temp.next == nil{
							break
						}
						temp = temp.next
					}
					temp.next = newhero
				}
				//显示链表各个信息
				func ShowHeroNode(head *HeroNode){
					temp := head
					if temp.next == nil{
						fmt.Println("该链表为空")
						return
					}
					for{
						fmt.Printf("[%d,%s]\n",temp.next.id,temp.next.name)
						temp = temp.next
						if temp.next == nil{
							break
						}
					}
				}
			-实例2(插入链表升级,根据id排序连接)
				//插入链表
				func InsertHeroNode(head *HeroNode, newhero *HeroNode) {
					temp := head
					for{
						if temp.next == nil{
							break
						}else if temp.next.id > newhero.id{
							break
						}else if temp.next.id == newhero.id{
							fmt.Println("当前id:",newhero.id,"重复")
							return
						}
						temp = temp.next
					}
					newhero.next = temp.next
					temp.next = newhero
				}
			-实例3：(删除链表某个字段)
				//删除节点
				func deleteHeroNode(head *HeroNode,id int) {
					temp := head
					flag := false
					for{
						if temp.next == nil{
							break
						} else if temp.next.id == id{
							flag = true
							break
						}
						temp = temp.next
					}
					if flag {
						temp.next = temp.next.next
					}else {
						fmt.Println("没有需要删除的id,",id)
					}
				}
		-双向链表：
			-概念：单个节点有两个链，一个指向前一个节点，一个指向下一个节点	   
			-实例1：（基础案例）
				func main()  {
					var hero = &Hero{}
					var hero1 = &Hero{id:   1, name: "宋江",}
					var hero2 = &Hero{id:   2, name: "张飞",}
					var hero3 = &Hero{id:   3, name: "李四",}
					var hero4 = &Hero{id:   4, name: "林冲",}
					InsertHero(hero,hero1)
					InsertHero(hero,hero2)
					InsertHero(hero,hero3)
					InsertHero(hero,hero4)
					ShowHer(hero)
				}
				//插入链表
				func InsertHero(head *Hero, newhero *Hero) {
					temp := head
					for{
						if temp.next == nil{
							break
						}
						temp = temp.next
					}
					temp.next = newhero
					newhero.pre = temp
				}
				//查看链表
				func ShowHer(head *Hero){
					temp := head
					if temp.next == nil{
						fmt.Println("该链表为空")
						return
					}
					for{
						fmt.Printf("[%d,%s]\n",temp.next.id,temp.next.name)
						temp = temp.next
						if temp.next == nil{
							break
						}
					}
				}
			-实例2：（反向列表特点,可以逆序查看）
				//逆序查看
				func DescHero(head *Hero){
					temp := head
					if temp.next == nil{
						fmt.Println("该链表为空")
						return
					}

					for {
						if temp.next == nil{
							break
						}
						temp = temp.next
					}

					for{
						fmt.Printf("[%d,%s]\n",temp.id,temp.name)
						temp = temp.pre
						if temp.pre == nil{
							break
						}
					}
				}
		-单向环形链表：
			-概念：最一个节点指向最先的节点
			-技巧：删除链表的某个节点,设定辅助节点很重要。
				   head有值--->需要用值来设定
			-实例（简单案例）：
				type CatNode struct {
					id    int
					name  string
					next  *CatNode
				}

				func main() {
					 cat := &CatNode{}
					 cat1 := &CatNode{
						id:1,
						name:"小白",
					 }
					InsertCatNode(cat,cat1)
					ShowCatNode(cat)
					
				}
				//添加猫猫
				func InsertCatNode(head *CatNode, newCatNode *CatNode) {
					//判断是否是第一猫
					if head.next == nil {
						head.id = newCatNode.id
						head.name = newCatNode.name
						head.next = head
						fmt.Println("第一只猫已加入")
						return
					}
					temp := head
					for {
						if temp.next == head{
							break
						}
						temp =  temp.next
					}
					temp.next = newCatNode//插入前后链接
					newCatNode.next = head
				}
				//查看猫猫
				func ShowCatNode(head *CatNode) {
					temp := head
					if temp.next == nil{
						return
					}
					for {
						fmt.Println(temp.id,temp.name)
						if temp.next == head{
							break
						}
						temp = temp.next
					}
				}
			-删除猫猫(比较复杂,有多种情况判断)
				//删除猫猫
				func DeleteCatNode(head *CatNode,id int) {
					//没有猫猫的情况
					if head.next == nil{
						fmt.Println("没有猫猫删除")
						return
					}
					//一只猫猫的情况
					if head.next == head {
						head.next = nil
						return
					}
					/**********第一个和最后一个**********/
					temp := head
					tail := head
					for {
						if tail.next == head{
							break
						}
						tail = tail.next
					}

					//多只猫猫的情况
					for {
						//删除的猫是第一只
						if head.id == id {
							fmt.Println("删除的是f猫猫")
							head.id = temp.next.id
							head.name = temp.next.name
							head.next = temp.next.next
							temp = head.next
							break
						}
						//删除的猫不是第一只
						if temp.id == id {
							//删除的猫是最后一只
							fmt.Println("删除的不是f猫猫")
							tail.next = temp.next
							temp = temp.next
							break
						}
						temp = temp.next
						tail = tail.next
					}
					/**********第一个和最后一个**********/

					fmt.Println("删除：猫猫",id,"成功")
					return
				}
			-约瑟夫问题（丢手绢）：
				type StuNode struct {
					id int
					next *StuNode
				}
				func main() {
					head := AddStu(5)
					ShowStu(head)
					Play(head,2,4)
				}
				//创建环形链
				func AddStu(num int ) *StuNode {
					first := &StuNode{}
					curt := &StuNode{}
					if num <1 {
						fmt.Println("num输入错误")
						return  first
					}

					for i := 1;i <=num;i++{
						boy :=&StuNode{
							id:   i,
						}
						if i == 1{
							//如果第一个boy ,让他自循环
							first = boy
							curt = boy
							curt.next = first
						}else{
							curt.next = boy
							curt = boy
							curt.next = first
						}
					}
					return first
				}
				//显示环形链
				func ShowStu(head *StuNode) {
					temp := head
					if temp.next == nil{
						log.Fatal("没有小朋友")
					}
					for {
						fmt.Println(temp.id)
						if temp.next == head{
							break
						}
						temp = temp.next
					}
				}
				//丢手绢出列
				func Play(head *StuNode, startId int, num int) {
					if num <0 {
						fmt.Println("请设定正常丢手绢长度")
						return
					}
					if head == nil {
						fmt.Println("没有小朋友参加")
						return
					}
					//尾巴指针
					tail := head
					for {
						if tail.next == head{
							break
						}
						tail = tail.next
					}
					for i:=1 ;i<= startId - 1 ;i++{
						head = head.next
						tail = tail.next
					}
					fmt.Printf("开始的是%v\n",head.id)
					for{
						for i:=1 ;i<= num - 1 ;i++ {
							head = head.next
							tail = tail.next
						}
						fmt.Println(head.id,"出局")
						tail.next = head.next
						head = head.next
						if tail == head{
							break
						}
					}
					fmt.Println(head.id,"最后出局")
				}

	4.栈stack --别名：堆栈
		-概念：一个先入后出的有序列表
				限制线性表中元素的插入和删除只能在线性表的同一段进行的一种特殊线性表。
				允许插入和删除的一段为变化的一端--称为 栈顶。
				另一端为固定的一段---称为栈底
        -需要实现的函数：
            s.top       取出栈顶
            s.empty     判断栈是否为空
            s.push(x)   将x存入栈
            s.pop()     弹出栈顶
            s.size      栈的存储个数
		-应用场景：
			1.子程序调用：
			    跳往子程序前,会将下个指令的地址存到栈中,程序执行完将地址取出,回到原程序
			2.处理递归调用：
			    除了储存下一个指令的地址外,将参数、区域变量存到stack中
            3.表达式的转换与求值
            4.二叉树的遍历
            5.图像的深度优先搜索法
	    -实例：
            type Stack struct {
                //MaxTop int    // 栈的最大数量
                Top      int   // 栈顶
                Arr      []int // 栈数据
            }
            // 入栈
            func (s *Stack) Push(val int) {
                s.Top++
                s.Arr = append(s.Arr, val)
            }

            // 出栈
            func (s *Stack) Pop() (int, error) {
                // 没有就不出了
                if s.Top == -1 {
                    //fmt.Println("stack empty")
                    return -1, errors.New("stack empty")
                }
                val := s.Arr[s.Top]
                s.Top--
                return val, nil
            }
	
	5.二叉搜索树(BST)
		-基本概念：
			-二叉拥有的属性有：left 左子结点;right 右子结点;p 父结点;key 该结点的属性
			-根结点为：整颗数唯一一个父结点为null的结点
			-当结点没有父结点也没有子结点时,该结点的key就为Null
			-某结点的所有左子结点的key都应该比该结点的key小或等于
				-例: x.left.key <= x.key  
			-某结点的所有右子结点的key都应该比该结点的key大或等于
				-例：x.right.key >= x.key
		-用处：
			一种用于搜索的数据结构
		-性能：
			遍历 < BST <= 红黑数；其性能的好坏取决于数据插入的顺序,不能保证
		-搜索模式：
			搜一个树,先对比节点,比节点小进入左子节点,比节点大进入右子节点,以此推论

	6.堆heap
     -基本概念:
        堆就是用数组实现的二叉树    -- 长相为:[ 10, 7, 2, 5, 1 ]
        使用堆属性进行排序
     -常用方法:
        1.构建优先队列
        2.支持堆排序
        3.快速找出一个集合中的最小值（或者最大值）***
     -最大堆和最小堆:
        -最大堆:
            父节点比子节点的值都大  意味着 根节点最大
        -最小堆:
            父节点比子节点的值都小  意味着 根节点最大
    -堆的某个节点其父子节点怎么找:
        -父节点：
            math.Floor(float64(-1)/2)
        -子节点:
            left = 2i+1
            right = 2i+2
    -不要使用普通树的方式来实现堆 -- 会造成空间浪费
    -获取堆的层数:
        -高度 h = math.Floor(float64(log2(len(heap))))
        -层数: h+1
        -如果最下层被铺满: 那最下层的节点数 = 2^h
        -下层以上的所有层节点数 = 2^h - 1
        -整个节点数 = 2^(h+1) -1
        -节点总数位于: [floor(n/2),n-1] 直接
    -堆操作:
        shiftUp() O(log n)
            如果一个节点比它的父节点大（最大堆）或者小（最小堆），那么需要将它同父节点交换位置
        shiftDown() -- heapify O(log n)
            如果一个节点比它的子节点小（最大堆）或者大（最小堆），那么需要将它向下移动
        insert(value) O(log n)
            在堆的尾部添加一个新的元素，然后使用 shiftUp 来修复对
        remove(): O(log n)
            移除并返回最大值（最大堆）或者最小值（最小堆）。为了将这个节点删除后的空位填补上，需要将最后一个元素移到根节点的位置，然后使用 shiftDown 方法来修复堆
        removeAtIndex(index) O(log n)
            当它与子节点比较位置时无序时使用 shiftDown()，如果与父节点比较发现无序则使用 shiftUp()
        replace(index, value) O(log n)
            将一个更小的值（最小堆）或者更大的值（最大堆）赋值给一个节点。由于这个操作破坏了堆属性，所以需要使用 shiftUp() 来修复堆属性
        search(value)   O( n)
            搜索某值在数组中的index
        buildHeap(array) O(n)
            将无序数组通过调用insert()方法 转成对排序
        堆排序 O(n lg n)
            由于堆就是一个数组，我们可以使用它独特的属性将数组从低到高排序
        peek() O(1)
            获取 最大/最小值

	7.R-tree
	 -基本:
	    R-tree 是 B-tree向多維空间发展的结果之一
	    R-tree 是动态索引结构,n叉树
	    每个节点都有 磁盘页 和 区域
	    -非叶节点:
	        磁盘页:存储所有子节点的区域范围
	        所有子节点都区域都在其区域范围内
	    -叶节点
	        磁盘页:存储其区域范围的所有空间对象外接矩形
        -每个节点都有上下限
            -下限:
                保证每个节点对磁盘空间有效利用
            -上限:
                当插入新的结点导致某结点要求的空间大于一个磁盘页时，该结点一分为二(分裂)
    -数据结构:
        -R-Tree是n 叉树，n称为R-Tree的扇（fan）。
        -每个结点对应一个矩形。
        -叶子结点上包含了小于等于n 的对象，其对应的矩为所有对象的外包矩形。
        -非叶结点的矩形为所有子结点矩形的外包矩形。
        优秀的R-tree特点:
            -位置上相邻的结点尽量在树中聚集为一个父结点。
            -同一层中各兄弟结点相交部分比例尽量小。

    8.B-Tree
     -概念：
        -一种多叉平衡查找树
        -m阶 m指:数的阶数,1个节点可以又m-1个key,同时最多有m个子节点
        -每个叶子节点的深度相同，均为树高h
        -意味着:1个节点又m-1个key同时又m个指向其子节点的指针
     -插入操作：
        当一个数插入时，根据二叉规律找到适合自己的位置
        当插入后导致当前节点数超过m-1个key时，节点分裂，中间数升级给父节点，如果父节点也满key了，递归向其更多父节点升级，没有父节点就创造父节点
        如果节点分裂成左右节点，其子节点指向优先给该做节点
     -删除操作：
        丰满点：ceil(m/2)-1  >丰满  =一般  <贫瘠 （贫瘠点与一般点都无法外借）
        当一个数删除时，将其删除后看其当前节点是否贫瘠，是就从子节点借，借不到向父节点借，借不到向兄弟节点借，实在借不到父节点降级同时凑合在一起，树高将会下降一层
        借一般向升序的下个关键字借
     -查询操作：
        与一般二叉树查询差不多，判断大小，小就往左，大就往右，相等就找到了

    9.B+Tree
     -概念：
        -B-Tree的基础上做了一些调整
        -1个节点最多又m-1个key，同时他的指针与Key值相同
        -所有非叶节点不存储数据只做引导，其数据（可以是数据地址，也可以是数据本身）都保存在叶节点
        -所有叶节点根据一个链指针连在一起，目的：正好时所有数据的有序序列，方便做全表扫描或者范围查询
        -



---------------------------------------算法-------------------------------------------
    1.栈、队列、堆 数据结构应用于实例
    -需要实现的函数：
        -栈：
            s.top       取出栈顶
            s.empty     判断栈是否为空
            s.push(x)   将x存入栈
            s.pop()     弹出栈顶
            s.size      栈的存储个数
		-队列：
		    q.empty     判断队列是否为空
		    q.front     返回队列头元素
		    q.back      返回队列尾元素
		    q.pop       弹出队列头元素
		    q.push(x)   将x添加至队列
		    q.size      返回队列的存储个数
        -堆：


    -解题实例：
        -1.设计一个栈,支持基本的栈操作,其内部存储数据结构是标准的队列：
            -思路 在q.push的时候 用个临时队列接收,再将真实队列的数据插在他后面
        -2.使用栈实现队列


				
				
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  