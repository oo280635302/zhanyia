-------------------------------------------计算机组成原理-----------------------------------------------------
    1.计算机基本概念
		-1.基本组成
		    -冯诺依曼计算机特点:
				1、计算器由5大部件组成
					-运算器，存储器，控制器，输入，输出
				2、指令和数据以同等地位存于存储器中，可按地址寻访
				3、指令和数据用二进制表示
				4、指令由操作码和地址码组成
				5、存储程序
				6、以运算器为中心 
			-系统复杂性管理的方法
				1、层次化Hierachy：
					将被设计的系统划分为多个模块或子模块
				2、模块化Modularity:
					有明确定义的功能和接口
				3、规则性regularity：
					模块更容易被重用
		-2.存储器的基本组成
			-存储体->存储单元->存储元件(0/1表示)
			-组成：
				-MAR存储器地址寄存器memory address register：
					用于反映存储单元的个数
				-MDR存储器数据寄存器：
					反映存储字长
				-存储体
		-3.运算器的基本组成
			-算术逻辑单元 ALU
			-累加器 ACC
			-乘商寄存器 MQ
			-操作数寄存器 X
		-4.控制器的基本结构
			-控制器的作用：解释指令,保证指令按序执行
			-程序计数器PC
			-指令寄存器IR
			-控制单元CU
		-5.计算机硬件的技术标准
			-机器字长：
				-cpu能处理数据的位数与cpu的寄存器位数有关
			-预算速度：
				-主频
				-核数,每个核支持的线程数
				-吉普森法
				-CPI执行一条指令所需始终周期数
				-MIPS每秒执行的X百万条指令
				-FLOPS每秒浮点运算次数
			-存储容量
				-主存容量
					-存储单元个数×存储字长
				-辅存容量
	2.系统总线
		-1.基本概念：
			-总线是连接各个部件的信息传输线是各个部件共享的传输介质
		-2.总线的分类:
			-片内总线
			-系统总线
				-数据总线
				-地址总线
				-控制总线
			-通信总线
		-3.总线的特性与性能指标
			-性能指标：
				-总线宽度: 数据线的根数
				-标准传输率：传输最大字节数Mbps/s
				-时钟同步/异步
				-总线复用：地址线/数据线的复用
				-信号线数：地址/控制/数据线的总和
				-总线控制方式：突发、自动、仲裁、逻辑、计数
				-其他指标：负载能力
			-总线标准
				-目的是为了让每个硬件单独剥离出来方便
				-USB通用串线总线Universal Serial Bus
		-4.总线的控制:
			-基本概念：	
				主设备：对总线有控制权
				从设备：响应从主设备发来的总线命令
			-总线判优控制：
				-集中式
					-链式查询
					-计数器定时查询
					-独立请求方式
				-分布式
				-链式查询方式：
					-BS 总线忙线
					-BR 总线请求线
					-BG 总线同意线
					-I/O设备有优先级	意味优先级最低的I/O设备容易一直被占用
					-适用于：微型/简单设备中
				-计数器定时查询方式：
					-设备地址
					-BS 总线忙线
					-BR 总线请求线
					-根据计数器访问相对应设备,然后依次查找直到直到
					-相对链式：优先级不固定
				-独立请求方式：
					-每个I/O设备都有一个BG+BS接口,总线内部实现优先级排队
					-优缺点：优先级更灵活,但是线路也随之真多
			-总线的通信控制：
				-同步通信：
					有统一时标控制数据传送
				-异步通信:
					采用应答方式,没有公共时钟标准
					使用全互锁保证命令可靠性 - 有点类似tcp
				-半同步通信：
					同步、异步结合
					同步+wait异步
				-分离式通信:
					充分挖掘系统总线每个瞬间潜力
					各模块分离,谁占用总线谁就是总线
					采用同步方式通信，但不等对方回答
					各模块准备数据时，不占用总线
					总线被占用时，无空闲
	3.存储器:
		-1.基本概念：	
			-分类：
				-主存储器：
					-RAM可读可选
						-静态SRAM
						-动态DRAM
					-ROM只读
						-MROM 可擦除
						-PROM 可编程
						-EPROM 电动可编程
						-EEPROM 电动可擦除可编程
				-Flash Memory:
					SSD、缓存、U盘
				-高速缓冲存储器chache：
					-现在一般用静态RAM
				-辅助存储器：
			-存储器的层次结构
				-寄存器->缓存->主存->磁盘->光盘->磁带
					-左到右 
					-速度：快—>慢
					-容量：小->大
					-价格：高->低
		-2.主存储器
			-基本组成：
				存储体,读写电路,MDR,驱动器,译码器,MAR
			-主存与cpu的联系方式：
			-主存中存储单元地址的分配：
				-高位字节地址为字地址
					大端、大卫方式
				-地位字节地址为字地址
					小端、小尾方式
			-主存的技术指标：
			-半导体存储芯片简介：
				-译码驱动、存储矩阵、读写电路
			    -芯片单位： 16K(单芯容量) * 1位 (每个存储单元保存1位信息)
				-多个1位并联形成多位凑合成芯片组
				-驱动方式：
				    线选法(线*线)，重合法(分行列，线*2)
            -静态ram
                -保存0-1的原理：触发器，行开关，列开关
                -写有两个条，其中一个取非 保证触发器左右不相同
            -动态ram
                -保存0-1的原理：电容表示 有电容为1
                -读有电容高频变电频读出为0，否则无电容低电频读出为1(相反)
				-读出相反，写入相同(1对电容充电，0对电容放点)
				-刷新放大器：电容会漏电-每段时间对电容进行刷新
				-刷新:刷新只与行有关
                    -集中刷新：大概3.2%的死区时间 无法读写操作
                    -分散刷新：每次读取都要进行一次刷新，无死区，性能下降1倍
                    -异步刷新：每行数据不同时间段刷新 - 死区为0.5% 将死区时间安排在cpu译码时间就能避开死区时间
            -DRam与SRam区别
                -DRAM:电容-集成度高-引脚少-功耗低-价格低-速度慢(电容)-要刷新   - 主存 - 内存条
                -SRAM:触发器-集成度低-引脚多-功耗高-价格高-速度快-无刷新  - 缓存 cache
            -存储器的效验
                -检错能力与任意两组合法代码之间的二进制差异有关
        -3.高速缓存存储器cache
            -主要：命中率
            -写入操作：
                -写直达write_through 同时写入cache与主存
                -写回法write_back 先写入cache最后当被替换时才写入主存
            -cache改进
                -cache级数
                -统一缓存和分立缓存：指令cache和数据cache分开
            -cache-主存地址映射
                -直接映射 划分片区 cache保存的该片区的一个字块 优点快  缺点容易出现某些块因为片区cache被占用无法进入cache
                -全相联映射
                -组相连映射
            -替换算法
                -FIFO 不能保证常用的cache被保证
                -LRU
        -4辅助存储器
            -就是硬盘(磁盘)




    -后期笔记：
        https://blog.csdn.net/weixin_46654114/article/details/105812651
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			