// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: privacy.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 协议本身
type Privacy struct {
	// 协议内容
	PrivacyContent string `protobuf:"bytes,1,opt,name=privacy_content,json=privacyContent,proto3" json:"privacy_content,omitempty"`
}

func (m *Privacy) Reset()         { *m = Privacy{} }
func (m *Privacy) String() string { return proto.CompactTextString(m) }
func (*Privacy) ProtoMessage()    {}
func (*Privacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{0}
}
func (m *Privacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Privacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Privacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Privacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Privacy.Merge(m, src)
}
func (m *Privacy) XXX_Size() int {
	return m.Size()
}
func (m *Privacy) XXX_DiscardUnknown() {
	xxx_messageInfo_Privacy.DiscardUnknown(m)
}

var xxx_messageInfo_Privacy proto.InternalMessageInfo

func (m *Privacy) GetPrivacyContent() string {
	if m != nil {
		return m.PrivacyContent
	}
	return ""
}

// 获取隐私协议请求
type QueryPrivacyReq struct {
	AppKey string `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
}

func (m *QueryPrivacyReq) Reset()         { *m = QueryPrivacyReq{} }
func (m *QueryPrivacyReq) String() string { return proto.CompactTextString(m) }
func (*QueryPrivacyReq) ProtoMessage()    {}
func (*QueryPrivacyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{1}
}
func (m *QueryPrivacyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrivacyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrivacyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrivacyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrivacyReq.Merge(m, src)
}
func (m *QueryPrivacyReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrivacyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrivacyReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrivacyReq proto.InternalMessageInfo

func (m *QueryPrivacyReq) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

// 获取隐私协议回复
type QueryPrivacyResp struct {
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 协议内容
	PrivacyContent string `protobuf:"bytes,2,opt,name=privacy_content,json=privacyContent,proto3" json:"privacy_content,omitempty"`
}

func (m *QueryPrivacyResp) Reset()         { *m = QueryPrivacyResp{} }
func (m *QueryPrivacyResp) String() string { return proto.CompactTextString(m) }
func (*QueryPrivacyResp) ProtoMessage()    {}
func (*QueryPrivacyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{2}
}
func (m *QueryPrivacyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrivacyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrivacyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrivacyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrivacyResp.Merge(m, src)
}
func (m *QueryPrivacyResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrivacyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrivacyResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrivacyResp proto.InternalMessageInfo

func (m *QueryPrivacyResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QueryPrivacyResp) GetPrivacyContent() string {
	if m != nil {
		return m.PrivacyContent
	}
	return ""
}

func init() {
	proto.RegisterType((*Privacy)(nil), "proto.Privacy")
	proto.RegisterType((*QueryPrivacyReq)(nil), "proto.QueryPrivacyReq")
	proto.RegisterType((*QueryPrivacyResp)(nil), "proto.QueryPrivacyResp")
}

func init() { proto.RegisterFile("privacy.proto", fileDescriptor_dde03d4df7a6e99a) }

var fileDescriptor_dde03d4df7a6e99a = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0x2c,
	0x4b, 0x4c, 0xae, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x46, 0x5c,
	0xec, 0x01, 0x10, 0x71, 0x21, 0x75, 0x2e, 0x7e, 0xa8, 0x92, 0xf8, 0xe4, 0xfc, 0xbc, 0x92, 0xd4,
	0xbc, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x3e, 0xa8, 0xb0, 0x33, 0x44, 0x54, 0x49,
	0x8b, 0x8b, 0x3f, 0xb0, 0x34, 0xb5, 0xa8, 0x12, 0xaa, 0x31, 0x28, 0xb5, 0x50, 0x48, 0x9c, 0x8b,
	0x3d, 0xb1, 0xa0, 0x20, 0x3e, 0x3b, 0xb5, 0x12, 0xaa, 0x87, 0x2d, 0xb1, 0xa0, 0xc0, 0x3b, 0xb5,
	0x52, 0xc9, 0x9f, 0x4b, 0x00, 0x55, 0x6d, 0x71, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x72, 0x7e, 0x4a,
	0x2a, 0x58, 0x25, 0x6b, 0x10, 0x98, 0x8d, 0xcd, 0x72, 0x26, 0x6c, 0x96, 0x3b, 0x49, 0x9c, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c,
	0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x47, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x71, 0x4d, 0xeb, 0x11, 0xe9, 0x00, 0x00, 0x00,
}

func (m *Privacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Privacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Privacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivacyContent) > 0 {
		i -= len(m.PrivacyContent)
		copy(dAtA[i:], m.PrivacyContent)
		i = encodeVarintPrivacy(dAtA, i, uint64(len(m.PrivacyContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrivacyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrivacyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrivacyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintPrivacy(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrivacyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrivacyResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrivacyResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivacyContent) > 0 {
		i -= len(m.PrivacyContent)
		copy(dAtA[i:], m.PrivacyContent)
		i = encodeVarintPrivacy(dAtA, i, uint64(len(m.PrivacyContent)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPrivacy(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Privacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrivacyContent)
	if l > 0 {
		n += 1 + l + sovPrivacy(uint64(l))
	}
	return n
}

func (m *QueryPrivacyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovPrivacy(uint64(l))
	}
	return n
}

func (m *QueryPrivacyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrivacy(uint64(m.Code))
	}
	l = len(m.PrivacyContent)
	if l > 0 {
		n += 1 + l + sovPrivacy(uint64(l))
	}
	return n
}

func sovPrivacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivacy(x uint64) (n int) {
	return sovPrivacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Privacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Privacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Privacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivacyContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrivacyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrivacyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrivacyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrivacyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrivacyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrivacyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivacyContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivacy = fmt.Errorf("proto: unexpected end of group")
)
